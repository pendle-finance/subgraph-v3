// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Forge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Forge entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Forge entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Forge", id.toString(), this);
  }

  static load(id: string): Forge | null {
    return store.get("Forge", id) as Forge | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get forgeId(): string {
    let value = this.get("forgeId");
    return value.toString();
  }

  set forgeId(value: string) {
    this.set("forgeId", Value.fromString(value));
  }
}

export class MarketFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketFactory", id.toString(), this);
  }

  static load(id: string): MarketFactory | null {
    return store.get("MarketFactory", id) as MarketFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}

export class YieldContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save YieldContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save YieldContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("YieldContract", id.toString(), this);
  }

  static load(id: string): YieldContract | null {
    return store.get("YieldContract", id) as YieldContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get forgeId(): string {
    let value = this.get("forgeId");
    return value.toString();
  }

  set forgeId(value: string) {
    this.set("forgeId", Value.fromString(value));
  }

  get underlyingAsset(): string {
    let value = this.get("underlyingAsset");
    return value.toString();
  }

  set underlyingAsset(value: string) {
    this.set("underlyingAsset", Value.fromString(value));
  }

  get xyt(): string {
    let value = this.get("xyt");
    return value.toString();
  }

  set xyt(value: string) {
    this.set("xyt", Value.fromString(value));
  }

  get ot(): string {
    let value = this.get("ot");
    return value.toString();
  }

  set ot(value: string) {
    this.set("ot", Value.fromString(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get mintTxCount(): BigInt {
    let value = this.get("mintTxCount");
    return value.toBigInt();
  }

  set mintTxCount(value: BigInt) {
    this.set("mintTxCount", Value.fromBigInt(value));
  }

  get redeemTxCount(): BigInt {
    let value = this.get("redeemTxCount");
    return value.toBigInt();
  }

  set redeemTxCount(value: BigInt) {
    this.set("redeemTxCount", Value.fromBigInt(value));
  }

  get interestSettledTxCount(): BigInt {
    let value = this.get("interestSettledTxCount");
    return value.toBigInt();
  }

  set interestSettledTxCount(value: BigInt) {
    this.set("interestSettledTxCount", Value.fromBigInt(value));
  }

  get mintVolume(): BigDecimal {
    let value = this.get("mintVolume");
    return value.toBigDecimal();
  }

  set mintVolume(value: BigDecimal) {
    this.set("mintVolume", Value.fromBigDecimal(value));
  }

  get redeemVolume(): BigDecimal {
    let value = this.get("redeemVolume");
    return value.toBigDecimal();
  }

  set redeemVolume(value: BigDecimal) {
    this.set("redeemVolume", Value.fromBigDecimal(value));
  }

  get interestSettledVolume(): BigDecimal {
    let value = this.get("interestSettledVolume");
    return value.toBigDecimal();
  }

  set interestSettledVolume(value: BigDecimal) {
    this.set("interestSettledVolume", Value.fromBigDecimal(value));
  }

  get yieldBearingAsset(): string {
    let value = this.get("yieldBearingAsset");
    return value.toString();
  }

  set yieldBearingAsset(value: string) {
    this.set("yieldBearingAsset", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tradeVolume(): BigDecimal {
    let value = this.get("tradeVolume");
    return value.toBigDecimal();
  }

  set tradeVolume(value: BigDecimal) {
    this.set("tradeVolume", Value.fromBigDecimal(value));
  }

  get tradeVolumeUSD(): BigDecimal {
    let value = this.get("tradeVolumeUSD");
    return value.toBigDecimal();
  }

  set tradeVolumeUSD(value: BigDecimal) {
    this.set("tradeVolumeUSD", Value.fromBigDecimal(value));
  }

  get mintVolume(): BigDecimal {
    let value = this.get("mintVolume");
    return value.toBigDecimal();
  }

  set mintVolume(value: BigDecimal) {
    this.set("mintVolume", Value.fromBigDecimal(value));
  }

  get mintVolumeUSD(): BigDecimal {
    let value = this.get("mintVolumeUSD");
    return value.toBigDecimal();
  }

  set mintVolumeUSD(value: BigDecimal) {
    this.set("mintVolumeUSD", Value.fromBigDecimal(value));
  }

  get redeemVolume(): BigDecimal {
    let value = this.get("redeemVolume");
    return value.toBigDecimal();
  }

  set redeemVolume(value: BigDecimal) {
    this.set("redeemVolume", Value.fromBigDecimal(value));
  }

  get redeemVolumeUSD(): BigDecimal {
    let value = this.get("redeemVolumeUSD");
    return value.toBigDecimal();
  }

  set redeemVolumeUSD(value: BigDecimal) {
    this.set("redeemVolumeUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }
}

export class MintYieldToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintYieldToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintYieldToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintYieldToken", id.toString(), this);
  }

  static load(id: string): MintYieldToken | null {
    return store.get("MintYieldToken", id) as MintYieldToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get forgeId(): string {
    let value = this.get("forgeId");
    return value.toString();
  }

  set forgeId(value: string) {
    this.set("forgeId", Value.fromString(value));
  }

  get amountToTokenize(): BigDecimal {
    let value = this.get("amountToTokenize");
    return value.toBigDecimal();
  }

  set amountToTokenize(value: BigDecimal) {
    this.set("amountToTokenize", Value.fromBigDecimal(value));
  }

  get amountMinted(): BigDecimal {
    let value = this.get("amountMinted");
    return value.toBigDecimal();
  }

  set amountMinted(value: BigDecimal) {
    this.set("amountMinted", Value.fromBigDecimal(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get underlyingAsset(): string {
    let value = this.get("underlyingAsset");
    return value.toString();
  }

  set underlyingAsset(value: string) {
    this.set("underlyingAsset", Value.fromString(value));
  }

  get yieldBearingAsset(): string {
    let value = this.get("yieldBearingAsset");
    return value.toString();
  }

  set yieldBearingAsset(value: string) {
    this.set("yieldBearingAsset", Value.fromString(value));
  }

  get xytAsset(): string {
    let value = this.get("xytAsset");
    return value.toString();
  }

  set xytAsset(value: string) {
    this.set("xytAsset", Value.fromString(value));
  }

  get otAsset(): string {
    let value = this.get("otAsset");
    return value.toString();
  }

  set otAsset(value: string) {
    this.set("otAsset", Value.fromString(value));
  }

  get yieldContract(): string {
    let value = this.get("yieldContract");
    return value.toString();
  }

  set yieldContract(value: string) {
    this.set("yieldContract", Value.fromString(value));
  }

  get mintedValueUSD(): BigDecimal {
    let value = this.get("mintedValueUSD");
    return value.toBigDecimal();
  }

  set mintedValueUSD(value: BigDecimal) {
    this.set("mintedValueUSD", Value.fromBigDecimal(value));
  }
}

export class RedeemYieldToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RedeemYieldToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedeemYieldToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedeemYieldToken", id.toString(), this);
  }

  static load(id: string): RedeemYieldToken | null {
    return store.get("RedeemYieldToken", id) as RedeemYieldToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get forgeId(): string {
    let value = this.get("forgeId");
    return value.toString();
  }

  set forgeId(value: string) {
    this.set("forgeId", Value.fromString(value));
  }

  get amountToRedeem(): BigDecimal {
    let value = this.get("amountToRedeem");
    return value.toBigDecimal();
  }

  set amountToRedeem(value: BigDecimal) {
    this.set("amountToRedeem", Value.fromBigDecimal(value));
  }

  get amountRedeemed(): BigDecimal {
    let value = this.get("amountRedeemed");
    return value.toBigDecimal();
  }

  set amountRedeemed(value: BigDecimal) {
    this.set("amountRedeemed", Value.fromBigDecimal(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get underlyingAsset(): string {
    let value = this.get("underlyingAsset");
    return value.toString();
  }

  set underlyingAsset(value: string) {
    this.set("underlyingAsset", Value.fromString(value));
  }

  get yieldBearingAsset(): string {
    let value = this.get("yieldBearingAsset");
    return value.toString();
  }

  set yieldBearingAsset(value: string) {
    this.set("yieldBearingAsset", Value.fromString(value));
  }

  get xytAsset(): string {
    let value = this.get("xytAsset");
    return value.toString();
  }

  set xytAsset(value: string) {
    this.set("xytAsset", Value.fromString(value));
  }

  get otAsset(): string {
    let value = this.get("otAsset");
    return value.toString();
  }

  set otAsset(value: string) {
    this.set("otAsset", Value.fromString(value));
  }

  get yieldContract(): string {
    let value = this.get("yieldContract");
    return value.toString();
  }

  set yieldContract(value: string) {
    this.set("yieldContract", Value.fromString(value));
  }

  get redeemedValueUSD(): BigDecimal {
    let value = this.get("redeemedValueUSD");
    return value.toBigDecimal();
  }

  set redeemedValueUSD(value: BigDecimal) {
    this.set("redeemedValueUSD", Value.fromBigDecimal(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pair", id.toString(), this);
  }

  static load(id: string): Pair | null {
    return store.get("Pair", id) as Pair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get reserveUSD(): BigDecimal {
    let value = this.get("reserveUSD");
    return value.toBigDecimal();
  }

  set reserveUSD(value: BigDecimal) {
    this.set("reserveUSD", Value.fromBigDecimal(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get feesToken0(): BigDecimal {
    let value = this.get("feesToken0");
    return value.toBigDecimal();
  }

  set feesToken0(value: BigDecimal) {
    this.set("feesToken0", Value.fromBigDecimal(value));
  }

  get feesToken1(): BigDecimal {
    let value = this.get("feesToken1");
    return value.toBigDecimal();
  }

  set feesToken1(value: BigDecimal) {
    this.set("feesToken1", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal | null {
    let value = this.get("feesUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feesUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("feesUSD");
    } else {
      this.set("feesUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get("liquidityProviderCount");
    return value.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set("liquidityProviderCount", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get inToken(): string {
    let value = this.get("inToken");
    return value.toString();
  }

  set inToken(value: string) {
    this.set("inToken", Value.fromString(value));
  }

  get outToken(): string {
    let value = this.get("outToken");
    return value.toString();
  }

  set outToken(value: string) {
    this.set("outToken", Value.fromString(value));
  }

  get inAmount(): BigDecimal {
    let value = this.get("inAmount");
    return value.toBigDecimal();
  }

  set inAmount(value: BigDecimal) {
    this.set("inAmount", Value.fromBigDecimal(value));
  }

  get outAmount(): BigDecimal {
    let value = this.get("outAmount");
    return value.toBigDecimal();
  }

  set outAmount(value: BigDecimal) {
    this.set("outAmount", Value.fromBigDecimal(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get feesCollected(): BigDecimal {
    let value = this.get("feesCollected");
    return value.toBigDecimal();
  }

  set feesCollected(value: BigDecimal) {
    this.set("feesCollected", Value.fromBigDecimal(value));
  }

  get feesCollectedUSD(): BigDecimal {
    let value = this.get("feesCollectedUSD");
    return value.toBigDecimal();
  }

  set feesCollectedUSD(value: BigDecimal) {
    this.set("feesCollectedUSD", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPositions(): Array<string> | null {
    let value = this.get("liquidityPositions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityPositions(value: Array<string> | null) {
    if (value === null) {
      this.unset("liquidityPositions");
    } else {
      this.set(
        "liquidityPositions",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get usdSwapped(): BigDecimal {
    let value = this.get("usdSwapped");
    return value.toBigDecimal();
  }

  set usdSwapped(value: BigDecimal) {
    this.set("usdSwapped", Value.fromBigDecimal(value));
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPosition", id.toString(), this);
  }

  static load(id: string): LiquidityPosition | null {
    return store.get("LiquidityPosition", id) as LiquidityPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get liquidityTokenBalance(): BigDecimal {
    let value = this.get("liquidityTokenBalance");
    return value.toBigDecimal();
  }

  set liquidityTokenBalance(value: BigDecimal) {
    this.set("liquidityTokenBalance", Value.fromBigDecimal(value));
  }

  get supplyOfPoolOwnedPercentage(): BigDecimal {
    let value = this.get("supplyOfPoolOwnedPercentage");
    return value.toBigDecimal();
  }

  set supplyOfPoolOwnedPercentage(value: BigDecimal) {
    this.set("supplyOfPoolOwnedPercentage", Value.fromBigDecimal(value));
  }
}

export class LiquidityPositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LiquidityPositionSnapshot entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPositionSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPositionSnapshot", id.toString(), this);
  }

  static load(id: string): LiquidityPositionSnapshot | null {
    return store.get(
      "LiquidityPositionSnapshot",
      id
    ) as LiquidityPositionSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPosition(): string {
    let value = this.get("liquidityPosition");
    return value.toString();
  }

  set liquidityPosition(value: string) {
    this.set("liquidityPosition", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get block(): i32 {
    let value = this.get("block");
    return value.toI32();
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get token0Amount(): BigDecimal {
    let value = this.get("token0Amount");
    return value.toBigDecimal();
  }

  set token0Amount(value: BigDecimal) {
    this.set("token0Amount", Value.fromBigDecimal(value));
  }

  get token1Amount(): BigDecimal {
    let value = this.get("token1Amount");
    return value.toBigDecimal();
  }

  set token1Amount(value: BigDecimal) {
    this.set("token1Amount", Value.fromBigDecimal(value));
  }

  get token0PriceUSD(): BigDecimal {
    let value = this.get("token0PriceUSD");
    return value.toBigDecimal();
  }

  set token0PriceUSD(value: BigDecimal) {
    this.set("token0PriceUSD", Value.fromBigDecimal(value));
  }

  get token1PriceUSD(): BigDecimal {
    let value = this.get("token1PriceUSD");
    return value.toBigDecimal();
  }

  set token1PriceUSD(value: BigDecimal) {
    this.set("token1PriceUSD", Value.fromBigDecimal(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get reserveUSD(): BigDecimal {
    let value = this.get("reserveUSD");
    return value.toBigDecimal();
  }

  set reserveUSD(value: BigDecimal) {
    this.set("reserveUSD", Value.fromBigDecimal(value));
  }

  get liquidityTokenTotalSupply(): BigDecimal {
    let value = this.get("liquidityTokenTotalSupply");
    return value.toBigDecimal();
  }

  set liquidityTokenTotalSupply(value: BigDecimal) {
    this.set("liquidityTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get liquidityTokenBalance(): BigDecimal {
    let value = this.get("liquidityTokenBalance");
    return value.toBigDecimal();
  }

  set liquidityTokenBalance(value: BigDecimal) {
    this.set("liquidityTokenBalance", Value.fromBigDecimal(value));
  }

  get liquidityTokenMoved(): BigDecimal {
    let value = this.get("liquidityTokenMoved");
    return value.toBigDecimal();
  }

  set liquidityTokenMoved(value: BigDecimal) {
    this.set("liquidityTokenMoved", Value.fromBigDecimal(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get lpMints(): Array<string | null> {
    let value = this.get("lpMints");
    return value.toStringArray();
  }

  set lpMints(value: Array<string | null>) {
    this.set("lpMints", Value.fromStringArray(value));
  }

  get lpBurns(): Array<string | null> {
    let value = this.get("lpBurns");
    return value.toStringArray();
  }

  set lpBurns(value: Array<string | null>) {
    this.set("lpBurns", Value.fromStringArray(value));
  }

  get swaps(): Array<string | null> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string | null>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get mintYieldTokens(): Array<string | null> {
    let value = this.get("mintYieldTokens");
    return value.toStringArray();
  }

  set mintYieldTokens(value: Array<string | null>) {
    this.set("mintYieldTokens", Value.fromStringArray(value));
  }

  get redeemYieldTokens(): Array<string | null> {
    let value = this.get("redeemYieldTokens");
    return value.toStringArray();
  }

  set redeemYieldTokens(value: Array<string | null>) {
    this.set("redeemYieldTokens", Value.fromStringArray(value));
  }
}

export class MintLPToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintLPToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintLPToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintLPToken", id.toString(), this);
  }

  static load(id: string): MintLPToken | null {
    return store.get("MintLPToken", id) as MintLPToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    return value.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get amount0(): BigDecimal | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount0(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get amount1(): BigDecimal | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount1(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get feeTo(): Bytes | null {
    let value = this.get("feeTo");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeTo(value: Bytes | null) {
    if (value === null) {
      this.unset("feeTo");
    } else {
      this.set("feeTo", Value.fromBytes(value as Bytes));
    }
  }

  get feeLiquidity(): BigDecimal | null {
    let value = this.get("feeLiquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feeLiquidity(value: BigDecimal | null) {
    if (value === null) {
      this.unset("feeLiquidity");
    } else {
      this.set("feeLiquidity", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class BurnLPToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BurnLPToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BurnLPToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BurnLPToken", id.toString(), this);
  }

  static load(id: string): BurnLPToken | null {
    return store.get("BurnLPToken", id) as BurnLPToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    return value.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get amount0(): BigDecimal | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount0(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get amount1(): BigDecimal | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount1(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(value as Bytes));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get needsComplete(): boolean {
    let value = this.get("needsComplete");
    return value.toBoolean();
  }

  set needsComplete(value: boolean) {
    this.set("needsComplete", Value.fromBoolean(value));
  }

  get feeTo(): Bytes | null {
    let value = this.get("feeTo");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeTo(value: Bytes | null) {
    if (value === null) {
      this.unset("feeTo");
    } else {
      this.set("feeTo", Value.fromBytes(value as Bytes));
    }
  }

  get feeLiquidity(): BigDecimal | null {
    let value = this.get("feeLiquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feeLiquidity(value: BigDecimal | null) {
    if (value === null) {
      this.unset("feeLiquidity");
    } else {
      this.set("feeLiquidity", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class PendleData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PendleData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PendleData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PendleData", id.toString(), this);
  }

  static load(id: string): PendleData | null {
    return store.get("PendleData", id) as PendleData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocolSwapFee(): BigDecimal {
    let value = this.get("protocolSwapFee");
    return value.toBigDecimal();
  }

  set protocolSwapFee(value: BigDecimal) {
    this.set("protocolSwapFee", Value.fromBigDecimal(value));
  }

  get swapFee(): BigDecimal {
    let value = this.get("swapFee");
    return value.toBigDecimal();
  }

  set swapFee(value: BigDecimal) {
    this.set("swapFee", Value.fromBigDecimal(value));
  }

  get exitFee(): BigDecimal {
    let value = this.get("exitFee");
    return value.toBigDecimal();
  }

  set exitFee(value: BigDecimal) {
    this.set("exitFee", Value.fromBigDecimal(value));
  }
}

export class LiquidityPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPool", id.toString(), this);
  }

  static load(id: string): LiquidityPool | null {
    return store.get("LiquidityPool", id) as LiquidityPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get inToken0(): string {
    let value = this.get("inToken0");
    return value.toString();
  }

  set inToken0(value: string) {
    this.set("inToken0", Value.fromString(value));
  }

  get inToken1(): string {
    let value = this.get("inToken1");
    return value.toString();
  }

  set inToken1(value: string) {
    this.set("inToken1", Value.fromString(value));
  }

  get inAmount0(): BigDecimal {
    let value = this.get("inAmount0");
    return value.toBigDecimal();
  }

  set inAmount0(value: BigDecimal) {
    this.set("inAmount0", Value.fromBigDecimal(value));
  }

  get inAmount1(): BigDecimal {
    let value = this.get("inAmount1");
    return value.toBigDecimal();
  }

  set inAmount1(value: BigDecimal) {
    this.set("inAmount1", Value.fromBigDecimal(value));
  }

  get feesCollected(): BigDecimal {
    let value = this.get("feesCollected");
    return value.toBigDecimal();
  }

  set feesCollected(value: BigDecimal) {
    this.set("feesCollected", Value.fromBigDecimal(value));
  }

  get feesCollectedUSD(): BigDecimal {
    let value = this.get("feesCollectedUSD");
    return value.toBigDecimal();
  }

  set feesCollectedUSD(value: BigDecimal) {
    this.set("feesCollectedUSD", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}
