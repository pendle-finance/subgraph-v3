// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewMarketFactory extends ethereum.Event {
  get params(): NewMarketFactory__Params {
    return new NewMarketFactory__Params(this);
  }
}

export class NewMarketFactory__Params {
  _event: NewMarketFactory;

  constructor(event: NewMarketFactory) {
    this._event = event;
  }

  get marketFactoryId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get marketFactoryAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EtherWithdraw extends ethereum.Event {
  get params(): EtherWithdraw__Params {
    return new EtherWithdraw__Params(this);
  }
}

export class EtherWithdraw__Params {
  _event: EtherWithdraw;

  constructor(event: EtherWithdraw) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sendTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Exit extends ethereum.Event {
  get params(): Exit__Params {
    return new Exit__Params(this);
  }
}

export class Exit__Params {
  _event: Exit;

  constructor(event: Exit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token0Amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token1Amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get market(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Join extends ethereum.Event {
  get params(): Join__Params {
    return new Join__Params(this);
  }
}

export class Join__Params {
  _event: Join;

  constructor(event: Join) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token0Amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token1Amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get market(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class NewForge extends ethereum.Event {
  get params(): NewForge__Params {
    return new NewForge__Params(this);
  }
}

export class NewForge__Params {
  _event: NewForge;

  constructor(event: NewForge) {
    this._event = event;
  }

  get forgeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get forgeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SwapEvent extends ethereum.Event {
  get params(): SwapEvent__Params {
    return new SwapEvent__Params(this);
  }
}

export class SwapEvent__Params {
  _event: SwapEvent;

  constructor(event: SwapEvent) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get outToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get exactIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get exactOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get market(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class TokenWithdraw extends ethereum.Event {
  get params(): TokenWithdraw__Params {
    return new TokenWithdraw__Params(this);
  }
}

export class TokenWithdraw__Params {
  _event: TokenWithdraw;

  constructor(event: TokenWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PendleRouter__getMarketRateExactInResultSwapStruct extends ethereum.Tuple {
  get market(): Address {
    return this[0].toAddress();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get swapAmount(): BigInt {
    return this[3].toBigInt();
  }

  get limitReturnAmount(): BigInt {
    return this[4].toBigInt();
  }

  get maxPrice(): BigInt {
    return this[5].toBigInt();
  }
}

export class PendleRouter__getMarketRateExactInResult {
  value0: PendleRouter__getMarketRateExactInResultSwapStruct;
  value1: BigInt;

  constructor(
    value0: PendleRouter__getMarketRateExactInResultSwapStruct,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PendleRouter__getMarketRateExactOutResultSwapStruct extends ethereum.Tuple {
  get market(): Address {
    return this[0].toAddress();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get swapAmount(): BigInt {
    return this[3].toBigInt();
  }

  get limitReturnAmount(): BigInt {
    return this[4].toBigInt();
  }

  get maxPrice(): BigInt {
    return this[5].toBigInt();
  }
}

export class PendleRouter__getMarketRateExactOutResult {
  value0: PendleRouter__getMarketRateExactOutResultSwapStruct;
  value1: BigInt;

  constructor(
    value0: PendleRouter__getMarketRateExactOutResultSwapStruct,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PendleRouter__getMarketReservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PendleRouter__getMarketTokenAddressesResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class PendleRouter__newYieldContractsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class PendleRouter__renewYieldResult {
  value0: BigInt;
  value1: Address;
  value2: Address;

  constructor(value0: BigInt, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class PendleRouter__tokenizeYieldResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class PendleRouter extends ethereum.SmartContract {
  static bind(address: Address): PendleRouter {
    return new PendleRouter("PendleRouter", address);
  }

  claimLpInterests(markets: Array<Address>): Array<BigInt> {
    let result = super.call(
      "claimLpInterests",
      "claimLpInterests(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(markets)]
    );

    return result[0].toBigIntArray();
  }

  try_claimLpInterests(
    markets: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "claimLpInterests",
      "claimLpInterests(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(markets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  createMarket(
    _marketFactoryId: Bytes,
    _xyt: Address,
    _token: Address
  ): Address {
    let result = super.call(
      "createMarket",
      "createMarket(bytes32,address,address):(address)",
      [
        ethereum.Value.fromFixedBytes(_marketFactoryId),
        ethereum.Value.fromAddress(_xyt),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toAddress();
  }

  try_createMarket(
    _marketFactoryId: Bytes,
    _xyt: Address,
    _token: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createMarket",
      "createMarket(bytes32,address,address):(address)",
      [
        ethereum.Value.fromFixedBytes(_marketFactoryId),
        ethereum.Value.fromAddress(_xyt),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  data(): Address {
    let result = super.call("data", "data():(address)", []);

    return result[0].toAddress();
  }

  try_data(): ethereum.CallResult<Address> {
    let result = super.tryCall("data", "data():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarketRateExactIn(
    _tokenIn: Address,
    _tokenOut: Address,
    _inSwapAmount: BigInt,
    _marketFactoryId: Bytes
  ): PendleRouter__getMarketRateExactInResult {
    let result = super.call(
      "getMarketRateExactIn",
      "getMarketRateExactIn(address,address,uint256,bytes32):((address,address,address,uint256,uint256,uint256),uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_inSwapAmount),
        ethereum.Value.fromFixedBytes(_marketFactoryId)
      ]
    );

    return new PendleRouter__getMarketRateExactInResult(
      result[0].toTuple() as PendleRouter__getMarketRateExactInResultSwapStruct,
      result[1].toBigInt()
    ) as PendleRouter__getMarketRateExactInResult;
  }

  try_getMarketRateExactIn(
    _tokenIn: Address,
    _tokenOut: Address,
    _inSwapAmount: BigInt,
    _marketFactoryId: Bytes
  ): ethereum.CallResult<PendleRouter__getMarketRateExactInResult> {
    let result = super.tryCall(
      "getMarketRateExactIn",
      "getMarketRateExactIn(address,address,uint256,bytes32):((address,address,address,uint256,uint256,uint256),uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_inSwapAmount),
        ethereum.Value.fromFixedBytes(_marketFactoryId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleRouter__getMarketRateExactInResult(
        value[0].toTuple() as PendleRouter__getMarketRateExactInResultSwapStruct,
        value[1].toBigInt()
      ) as PendleRouter__getMarketRateExactInResult
    );
  }

  getMarketRateExactOut(
    _tokenIn: Address,
    _tokenOut: Address,
    _outSwapAmount: BigInt,
    _marketFactoryId: Bytes
  ): PendleRouter__getMarketRateExactOutResult {
    let result = super.call(
      "getMarketRateExactOut",
      "getMarketRateExactOut(address,address,uint256,bytes32):((address,address,address,uint256,uint256,uint256),uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_outSwapAmount),
        ethereum.Value.fromFixedBytes(_marketFactoryId)
      ]
    );

    return new PendleRouter__getMarketRateExactOutResult(
      result[0].toTuple() as PendleRouter__getMarketRateExactOutResultSwapStruct,
      result[1].toBigInt()
    ) as PendleRouter__getMarketRateExactOutResult;
  }

  try_getMarketRateExactOut(
    _tokenIn: Address,
    _tokenOut: Address,
    _outSwapAmount: BigInt,
    _marketFactoryId: Bytes
  ): ethereum.CallResult<PendleRouter__getMarketRateExactOutResult> {
    let result = super.tryCall(
      "getMarketRateExactOut",
      "getMarketRateExactOut(address,address,uint256,bytes32):((address,address,address,uint256,uint256,uint256),uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_outSwapAmount),
        ethereum.Value.fromFixedBytes(_marketFactoryId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleRouter__getMarketRateExactOutResult(
        value[0].toTuple() as PendleRouter__getMarketRateExactOutResultSwapStruct,
        value[1].toBigInt()
      ) as PendleRouter__getMarketRateExactOutResult
    );
  }

  getMarketReserves(
    _marketFactoryId: Bytes,
    _xyt: Address,
    _token: Address
  ): PendleRouter__getMarketReservesResult {
    let result = super.call(
      "getMarketReserves",
      "getMarketReserves(bytes32,address,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(_marketFactoryId),
        ethereum.Value.fromAddress(_xyt),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return new PendleRouter__getMarketReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMarketReserves(
    _marketFactoryId: Bytes,
    _xyt: Address,
    _token: Address
  ): ethereum.CallResult<PendleRouter__getMarketReservesResult> {
    let result = super.tryCall(
      "getMarketReserves",
      "getMarketReserves(bytes32,address,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(_marketFactoryId),
        ethereum.Value.fromAddress(_xyt),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleRouter__getMarketReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getMarketTokenAddresses(
    _market: Address
  ): PendleRouter__getMarketTokenAddressesResult {
    let result = super.call(
      "getMarketTokenAddresses",
      "getMarketTokenAddresses(address):(address,address)",
      [ethereum.Value.fromAddress(_market)]
    );

    return new PendleRouter__getMarketTokenAddressesResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_getMarketTokenAddresses(
    _market: Address
  ): ethereum.CallResult<PendleRouter__getMarketTokenAddressesResult> {
    let result = super.tryCall(
      "getMarketTokenAddresses",
      "getMarketTokenAddresses(address):(address,address)",
      [ethereum.Value.fromAddress(_market)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleRouter__getMarketTokenAddressesResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newYieldContracts(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): PendleRouter__newYieldContractsResult {
    let result = super.call(
      "newYieldContracts",
      "newYieldContracts(bytes32,address,uint256):(address,address)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );

    return new PendleRouter__newYieldContractsResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_newYieldContracts(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): ethereum.CallResult<PendleRouter__newYieldContractsResult> {
    let result = super.tryCall(
      "newYieldContracts",
      "newYieldContracts(bytes32,address,uint256):(address,address)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleRouter__newYieldContractsResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  redeemAfterExpiry(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt,
    _to: Address
  ): BigInt {
    let result = super.call(
      "redeemAfterExpiry",
      "redeemAfterExpiry(bytes32,address,uint256,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemAfterExpiry(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt,
    _to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemAfterExpiry",
      "redeemAfterExpiry(bytes32,address,uint256,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemDueInterests(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): BigInt {
    let result = super.call(
      "redeemDueInterests",
      "redeemDueInterests(bytes32,address,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemDueInterests(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemDueInterests",
      "redeemDueInterests(bytes32,address,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemDueInterestsMultiple(
    _forgeIds: Array<Bytes>,
    _underlyingAssets: Array<Address>,
    _expiries: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "redeemDueInterestsMultiple",
      "redeemDueInterestsMultiple(bytes32[],address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromFixedBytesArray(_forgeIds),
        ethereum.Value.fromAddressArray(_underlyingAssets),
        ethereum.Value.fromUnsignedBigIntArray(_expiries)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_redeemDueInterestsMultiple(
    _forgeIds: Array<Bytes>,
    _underlyingAssets: Array<Address>,
    _expiries: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "redeemDueInterestsMultiple",
      "redeemDueInterestsMultiple(bytes32[],address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromFixedBytesArray(_forgeIds),
        ethereum.Value.fromAddressArray(_underlyingAssets),
        ethereum.Value.fromUnsignedBigIntArray(_expiries)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  redeemUnderlying(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt,
    _amountToRedeem: BigInt,
    _to: Address
  ): BigInt {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(bytes32,address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(_amountToRedeem),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemUnderlying(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt,
    _amountToRedeem: BigInt,
    _to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(bytes32,address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(_amountToRedeem),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  renewYield(
    _forgeId: Bytes,
    _oldExpiry: BigInt,
    _underlyingAsset: Address,
    _newExpiry: BigInt,
    _amountToTokenize: BigInt,
    _yieldTo: Address
  ): PendleRouter__renewYieldResult {
    let result = super.call(
      "renewYield",
      "renewYield(bytes32,uint256,address,uint256,uint256,address):(uint256,address,address)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromUnsignedBigInt(_oldExpiry),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_newExpiry),
        ethereum.Value.fromUnsignedBigInt(_amountToTokenize),
        ethereum.Value.fromAddress(_yieldTo)
      ]
    );

    return new PendleRouter__renewYieldResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_renewYield(
    _forgeId: Bytes,
    _oldExpiry: BigInt,
    _underlyingAsset: Address,
    _newExpiry: BigInt,
    _amountToTokenize: BigInt,
    _yieldTo: Address
  ): ethereum.CallResult<PendleRouter__renewYieldResult> {
    let result = super.tryCall(
      "renewYield",
      "renewYield(bytes32,uint256,address,uint256,uint256,address):(uint256,address,address)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromUnsignedBigInt(_oldExpiry),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_newExpiry),
        ethereum.Value.fromUnsignedBigInt(_amountToTokenize),
        ethereum.Value.fromAddress(_yieldTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleRouter__renewYieldResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  tokenizeYield(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt,
    _amountToTokenize: BigInt,
    _to: Address
  ): PendleRouter__tokenizeYieldResult {
    let result = super.call(
      "tokenizeYield",
      "tokenizeYield(bytes32,address,uint256,uint256,address):(address,address)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(_amountToTokenize),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return new PendleRouter__tokenizeYieldResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_tokenizeYield(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt,
    _amountToTokenize: BigInt,
    _to: Address
  ): ethereum.CallResult<PendleRouter__tokenizeYieldResult> {
    let result = super.tryCall(
      "tokenizeYield",
      "tokenizeYield(bytes32,address,uint256,uint256,address):(address,address)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(_amountToTokenize),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleRouter__tokenizeYieldResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddForgeCall extends ethereum.Call {
  get inputs(): AddForgeCall__Inputs {
    return new AddForgeCall__Inputs(this);
  }

  get outputs(): AddForgeCall__Outputs {
    return new AddForgeCall__Outputs(this);
  }
}

export class AddForgeCall__Inputs {
  _call: AddForgeCall;

  constructor(call: AddForgeCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _forgeAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddForgeCall__Outputs {
  _call: AddForgeCall;

  constructor(call: AddForgeCall) {
    this._call = call;
  }
}

export class AddMarketFactoryCall extends ethereum.Call {
  get inputs(): AddMarketFactoryCall__Inputs {
    return new AddMarketFactoryCall__Inputs(this);
  }

  get outputs(): AddMarketFactoryCall__Outputs {
    return new AddMarketFactoryCall__Outputs(this);
  }
}

export class AddMarketFactoryCall__Inputs {
  _call: AddMarketFactoryCall;

  constructor(call: AddMarketFactoryCall) {
    this._call = call;
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _marketFactoryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddMarketFactoryCall__Outputs {
  _call: AddMarketFactoryCall;

  constructor(call: AddMarketFactoryCall) {
    this._call = call;
  }
}

export class AddMarketLiquidityAllCall extends ethereum.Call {
  get inputs(): AddMarketLiquidityAllCall__Inputs {
    return new AddMarketLiquidityAllCall__Inputs(this);
  }

  get outputs(): AddMarketLiquidityAllCall__Outputs {
    return new AddMarketLiquidityAllCall__Outputs(this);
  }
}

export class AddMarketLiquidityAllCall__Inputs {
  _call: AddMarketLiquidityAllCall;

  constructor(call: AddMarketLiquidityAllCall) {
    this._call = call;
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _xyt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _maxInXyt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxInToken(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _exactOutLp(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AddMarketLiquidityAllCall__Outputs {
  _call: AddMarketLiquidityAllCall;

  constructor(call: AddMarketLiquidityAllCall) {
    this._call = call;
  }
}

export class AddMarketLiquiditySingleCall extends ethereum.Call {
  get inputs(): AddMarketLiquiditySingleCall__Inputs {
    return new AddMarketLiquiditySingleCall__Inputs(this);
  }

  get outputs(): AddMarketLiquiditySingleCall__Outputs {
    return new AddMarketLiquiditySingleCall__Outputs(this);
  }
}

export class AddMarketLiquiditySingleCall__Inputs {
  _call: AddMarketLiquiditySingleCall;

  constructor(call: AddMarketLiquiditySingleCall) {
    this._call = call;
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _xyt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _forXyt(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _exactInAsset(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _minOutLp(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AddMarketLiquiditySingleCall__Outputs {
  _call: AddMarketLiquiditySingleCall;

  constructor(call: AddMarketLiquiditySingleCall) {
    this._call = call;
  }
}

export class BootstrapMarketCall extends ethereum.Call {
  get inputs(): BootstrapMarketCall__Inputs {
    return new BootstrapMarketCall__Inputs(this);
  }

  get outputs(): BootstrapMarketCall__Outputs {
    return new BootstrapMarketCall__Outputs(this);
  }
}

export class BootstrapMarketCall__Inputs {
  _call: BootstrapMarketCall;

  constructor(call: BootstrapMarketCall) {
    this._call = call;
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _xyt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _initialXytLiquidity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _initialTokenLiquidity(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BootstrapMarketCall__Outputs {
  _call: BootstrapMarketCall;

  constructor(call: BootstrapMarketCall) {
    this._call = call;
  }
}

export class ClaimLpInterestsCall extends ethereum.Call {
  get inputs(): ClaimLpInterestsCall__Inputs {
    return new ClaimLpInterestsCall__Inputs(this);
  }

  get outputs(): ClaimLpInterestsCall__Outputs {
    return new ClaimLpInterestsCall__Outputs(this);
  }
}

export class ClaimLpInterestsCall__Inputs {
  _call: ClaimLpInterestsCall;

  constructor(call: ClaimLpInterestsCall) {
    this._call = call;
  }

  get markets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ClaimLpInterestsCall__Outputs {
  _call: ClaimLpInterestsCall;

  constructor(call: ClaimLpInterestsCall) {
    this._call = call;
  }

  get interests(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class CreateMarketCall extends ethereum.Call {
  get inputs(): CreateMarketCall__Inputs {
    return new CreateMarketCall__Inputs(this);
  }

  get outputs(): CreateMarketCall__Outputs {
    return new CreateMarketCall__Outputs(this);
  }
}

export class CreateMarketCall__Inputs {
  _call: CreateMarketCall;

  constructor(call: CreateMarketCall) {
    this._call = call;
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _xyt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateMarketCall__Outputs {
  _call: CreateMarketCall;

  constructor(call: CreateMarketCall) {
    this._call = call;
  }

  get market(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _data(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class NewYieldContractsCall extends ethereum.Call {
  get inputs(): NewYieldContractsCall__Inputs {
    return new NewYieldContractsCall__Inputs(this);
  }

  get outputs(): NewYieldContractsCall__Outputs {
    return new NewYieldContractsCall__Outputs(this);
  }
}

export class NewYieldContractsCall__Inputs {
  _call: NewYieldContractsCall;

  constructor(call: NewYieldContractsCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class NewYieldContractsCall__Outputs {
  _call: NewYieldContractsCall;

  constructor(call: NewYieldContractsCall) {
    this._call = call;
  }

  get ot(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get xyt(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class RedeemAfterExpiryCall extends ethereum.Call {
  get inputs(): RedeemAfterExpiryCall__Inputs {
    return new RedeemAfterExpiryCall__Inputs(this);
  }

  get outputs(): RedeemAfterExpiryCall__Outputs {
    return new RedeemAfterExpiryCall__Outputs(this);
  }
}

export class RedeemAfterExpiryCall__Inputs {
  _call: RedeemAfterExpiryCall;

  constructor(call: RedeemAfterExpiryCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RedeemAfterExpiryCall__Outputs {
  _call: RedeemAfterExpiryCall;

  constructor(call: RedeemAfterExpiryCall) {
    this._call = call;
  }

  get redeemedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemDueInterestsCall extends ethereum.Call {
  get inputs(): RedeemDueInterestsCall__Inputs {
    return new RedeemDueInterestsCall__Inputs(this);
  }

  get outputs(): RedeemDueInterestsCall__Outputs {
    return new RedeemDueInterestsCall__Outputs(this);
  }
}

export class RedeemDueInterestsCall__Inputs {
  _call: RedeemDueInterestsCall;

  constructor(call: RedeemDueInterestsCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemDueInterestsCall__Outputs {
  _call: RedeemDueInterestsCall;

  constructor(call: RedeemDueInterestsCall) {
    this._call = call;
  }

  get interests(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemDueInterestsMultipleCall extends ethereum.Call {
  get inputs(): RedeemDueInterestsMultipleCall__Inputs {
    return new RedeemDueInterestsMultipleCall__Inputs(this);
  }

  get outputs(): RedeemDueInterestsMultipleCall__Outputs {
    return new RedeemDueInterestsMultipleCall__Outputs(this);
  }
}

export class RedeemDueInterestsMultipleCall__Inputs {
  _call: RedeemDueInterestsMultipleCall;

  constructor(call: RedeemDueInterestsMultipleCall) {
    this._call = call;
  }

  get _forgeIds(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get _underlyingAssets(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _expiries(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class RedeemDueInterestsMultipleCall__Outputs {
  _call: RedeemDueInterestsMultipleCall;

  constructor(call: RedeemDueInterestsMultipleCall) {
    this._call = call;
  }

  get interests(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amountToRedeem(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get redeemedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveMarketLiquidityAllCall extends ethereum.Call {
  get inputs(): RemoveMarketLiquidityAllCall__Inputs {
    return new RemoveMarketLiquidityAllCall__Inputs(this);
  }

  get outputs(): RemoveMarketLiquidityAllCall__Outputs {
    return new RemoveMarketLiquidityAllCall__Outputs(this);
  }
}

export class RemoveMarketLiquidityAllCall__Inputs {
  _call: RemoveMarketLiquidityAllCall;

  constructor(call: RemoveMarketLiquidityAllCall) {
    this._call = call;
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _xyt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _exactInLp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minOutXyt(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _minOutToken(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RemoveMarketLiquidityAllCall__Outputs {
  _call: RemoveMarketLiquidityAllCall;

  constructor(call: RemoveMarketLiquidityAllCall) {
    this._call = call;
  }
}

export class RemoveMarketLiquiditySingleCall extends ethereum.Call {
  get inputs(): RemoveMarketLiquiditySingleCall__Inputs {
    return new RemoveMarketLiquiditySingleCall__Inputs(this);
  }

  get outputs(): RemoveMarketLiquiditySingleCall__Outputs {
    return new RemoveMarketLiquiditySingleCall__Outputs(this);
  }
}

export class RemoveMarketLiquiditySingleCall__Inputs {
  _call: RemoveMarketLiquiditySingleCall;

  constructor(call: RemoveMarketLiquiditySingleCall) {
    this._call = call;
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _xyt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _forXyt(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _exactInLp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _minOutAsset(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RemoveMarketLiquiditySingleCall__Outputs {
  _call: RemoveMarketLiquiditySingleCall;

  constructor(call: RemoveMarketLiquiditySingleCall) {
    this._call = call;
  }
}

export class RenewYieldCall extends ethereum.Call {
  get inputs(): RenewYieldCall__Inputs {
    return new RenewYieldCall__Inputs(this);
  }

  get outputs(): RenewYieldCall__Outputs {
    return new RenewYieldCall__Outputs(this);
  }
}

export class RenewYieldCall__Inputs {
  _call: RenewYieldCall;

  constructor(call: RenewYieldCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _oldExpiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _newExpiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _amountToTokenize(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _yieldTo(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class RenewYieldCall__Outputs {
  _call: RenewYieldCall;

  constructor(call: RenewYieldCall) {
    this._call = call;
  }

  get redeemedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get ot(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get xyt(): Address {
    return this._call.outputValues[2].value.toAddress();
  }
}

export class SwapExactInCall extends ethereum.Call {
  get inputs(): SwapExactInCall__Inputs {
    return new SwapExactInCall__Inputs(this);
  }

  get outputs(): SwapExactInCall__Outputs {
    return new SwapExactInCall__Outputs(this);
  }
}

export class SwapExactInCall__Inputs {
  _call: SwapExactInCall;

  constructor(call: SwapExactInCall) {
    this._call = call;
  }

  get _tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _inTotalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minOutTotalAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SwapExactInCall__Outputs {
  _call: SwapExactInCall;

  constructor(call: SwapExactInCall) {
    this._call = call;
  }

  get outSwapAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactOutCall extends ethereum.Call {
  get inputs(): SwapExactOutCall__Inputs {
    return new SwapExactOutCall__Inputs(this);
  }

  get outputs(): SwapExactOutCall__Outputs {
    return new SwapExactOutCall__Outputs(this);
  }
}

export class SwapExactOutCall__Inputs {
  _call: SwapExactOutCall;

  constructor(call: SwapExactOutCall) {
    this._call = call;
  }

  get _tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _outTotalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxInTotalAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SwapExactOutCall__Outputs {
  _call: SwapExactOutCall;

  constructor(call: SwapExactOutCall) {
    this._call = call;
  }

  get inSwapAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TokenizeYieldCall extends ethereum.Call {
  get inputs(): TokenizeYieldCall__Inputs {
    return new TokenizeYieldCall__Inputs(this);
  }

  get outputs(): TokenizeYieldCall__Outputs {
    return new TokenizeYieldCall__Outputs(this);
  }
}

export class TokenizeYieldCall__Inputs {
  _call: TokenizeYieldCall;

  constructor(call: TokenizeYieldCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amountToTokenize(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class TokenizeYieldCall__Outputs {
  _call: TokenizeYieldCall;

  constructor(call: TokenizeYieldCall) {
    this._call = call;
  }

  get ot(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get xyt(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class WithdrawEtherCall extends ethereum.Call {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
