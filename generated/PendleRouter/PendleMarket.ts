// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EtherWithdraw extends ethereum.Event {
  get params(): EtherWithdraw__Params {
    return new EtherWithdraw__Params(this);
  }
}

export class EtherWithdraw__Params {
  _event: EtherWithdraw;

  constructor(event: EtherWithdraw) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sendTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Shift extends ethereum.Event {
  get params(): Shift__Params {
    return new Shift__Params(this);
  }
}

export class Shift__Params {
  _event: Shift;

  constructor(event: Shift) {
    this._event = event;
  }

  get xytWeightOld(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get xytWeightNew(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get reserve0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get weight0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reserve1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenWithdraw extends ethereum.Event {
  get params(): TokenWithdraw__Params {
    return new TokenWithdraw__Params(this);
  }
}

export class TokenWithdraw__Params {
  _event: TokenWithdraw;

  constructor(event: TokenWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PendleMarket__addMarketLiquidityDualResultTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class PendleMarket__addMarketLiquidityDualResult {
  value0: Array<PendleMarket__addMarketLiquidityDualResultTransfersStruct>;
  value1: BigInt;

  constructor(
    value0: Array<PendleMarket__addMarketLiquidityDualResultTransfersStruct>,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PendleMarket__addMarketLiquiditySingleResultTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class PendleMarket__bootstrapResultTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class PendleMarket__getReservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class PendleMarket__removeMarketLiquidityDualResultTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class PendleMarket__removeMarketLiquiditySingleResultTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class PendleMarket__swapExactInResultTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class PendleMarket__swapExactInResult {
  value0: BigInt;
  value1: Array<PendleMarket__swapExactInResultTransfersStruct>;

  constructor(
    value0: BigInt,
    value1: Array<PendleMarket__swapExactInResultTransfersStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }
}

export class PendleMarket__swapExactOutResultTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class PendleMarket__swapExactOutResult {
  value0: BigInt;
  value1: Array<PendleMarket__swapExactOutResultTransfersStruct>;

  constructor(
    value0: BigInt,
    value1: Array<PendleMarket__swapExactOutResultTransfersStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }
}

export class PendleMarket extends ethereum.SmartContract {
  static bind(address: Address): PendleMarket {
    return new PendleMarket("PendleMarket", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  addMarketLiquidityDual(
    user: Address,
    _desiredXytAmount: BigInt,
    _desiredTokenAmount: BigInt,
    _xytMinAmount: BigInt,
    _tokenMinAmount: BigInt
  ): PendleMarket__addMarketLiquidityDualResult {
    let result = super.call(
      "addMarketLiquidityDual",
      "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256):((uint256,bool)[2],uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_desiredXytAmount),
        ethereum.Value.fromUnsignedBigInt(_desiredTokenAmount),
        ethereum.Value.fromUnsignedBigInt(_xytMinAmount),
        ethereum.Value.fromUnsignedBigInt(_tokenMinAmount)
      ]
    );

    return new PendleMarket__addMarketLiquidityDualResult(
      result[0].toTupleArray<
        PendleMarket__addMarketLiquidityDualResultTransfersStruct
      >(),
      result[1].toBigInt()
    );
  }

  try_addMarketLiquidityDual(
    user: Address,
    _desiredXytAmount: BigInt,
    _desiredTokenAmount: BigInt,
    _xytMinAmount: BigInt,
    _tokenMinAmount: BigInt
  ): ethereum.CallResult<PendleMarket__addMarketLiquidityDualResult> {
    let result = super.tryCall(
      "addMarketLiquidityDual",
      "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256):((uint256,bool)[2],uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_desiredXytAmount),
        ethereum.Value.fromUnsignedBigInt(_desiredTokenAmount),
        ethereum.Value.fromUnsignedBigInt(_xytMinAmount),
        ethereum.Value.fromUnsignedBigInt(_tokenMinAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleMarket__addMarketLiquidityDualResult(
        value[0].toTupleArray<
          PendleMarket__addMarketLiquidityDualResultTransfersStruct
        >(),
        value[1].toBigInt()
      )
    );
  }

  addMarketLiquiditySingle(
    user: Address,
    _inToken: Address,
    _exactIn: BigInt,
    _minOutLp: BigInt
  ): Array<PendleMarket__addMarketLiquiditySingleResultTransfersStruct> {
    let result = super.call(
      "addMarketLiquiditySingle",
      "addMarketLiquiditySingle(address,address,uint256,uint256):((uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(_inToken),
        ethereum.Value.fromUnsignedBigInt(_exactIn),
        ethereum.Value.fromUnsignedBigInt(_minOutLp)
      ]
    );

    return result[0].toTupleArray<
      PendleMarket__addMarketLiquiditySingleResultTransfersStruct
    >();
  }

  try_addMarketLiquiditySingle(
    user: Address,
    _inToken: Address,
    _exactIn: BigInt,
    _minOutLp: BigInt
  ): ethereum.CallResult<
    Array<PendleMarket__addMarketLiquiditySingleResultTransfersStruct>
  > {
    let result = super.tryCall(
      "addMarketLiquiditySingle",
      "addMarketLiquiditySingle(address,address,uint256,uint256):((uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(_inToken),
        ethereum.Value.fromUnsignedBigInt(_exactIn),
        ethereum.Value.fromUnsignedBigInt(_minOutLp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        PendleMarket__addMarketLiquiditySingleResultTransfersStruct
      >()
    );
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bootstrap(
    user: Address,
    initialXytLiquidity: BigInt,
    initialTokenLiquidity: BigInt
  ): Array<PendleMarket__bootstrapResultTransfersStruct> {
    let result = super.call(
      "bootstrap",
      "bootstrap(address,uint256,uint256):((uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(initialXytLiquidity),
        ethereum.Value.fromUnsignedBigInt(initialTokenLiquidity)
      ]
    );

    return result[0].toTupleArray<
      PendleMarket__bootstrapResultTransfersStruct
    >();
  }

  try_bootstrap(
    user: Address,
    initialXytLiquidity: BigInt,
    initialTokenLiquidity: BigInt
  ): ethereum.CallResult<Array<PendleMarket__bootstrapResultTransfersStruct>> {
    let result = super.tryCall(
      "bootstrap",
      "bootstrap(address,uint256,uint256):((uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(initialXytLiquidity),
        ethereum.Value.fromUnsignedBigInt(initialTokenLiquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PendleMarket__bootstrapResultTransfersStruct>()
    );
  }

  bootstrapped(): boolean {
    let result = super.call("bootstrapped", "bootstrapped():(bool)", []);

    return result[0].toBoolean();
  }

  try_bootstrapped(): ethereum.CallResult<boolean> {
    let result = super.tryCall("bootstrapped", "bootstrapped():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  expiry(): BigInt {
    let result = super.call("expiry", "expiry():(uint256)", []);

    return result[0].toBigInt();
  }

  try_expiry(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expiry", "expiry():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factoryId(): Bytes {
    let result = super.call("factoryId", "factoryId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_factoryId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("factoryId", "factoryId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getReserves(): PendleMarket__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves():(uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new PendleMarket__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getReserves(): ethereum.CallResult<PendleMarket__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves():(uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleMarket__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  governanceManager(): Address {
    let result = super.call(
      "governanceManager",
      "governanceManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_governanceManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "governanceManager",
      "governanceManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockStartTime(): BigInt {
    let result = super.call("lockStartTime", "lockStartTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockStartTime",
      "lockStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemLpInterests(user: Address): BigInt {
    let result = super.call(
      "redeemLpInterests",
      "redeemLpInterests(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_redeemLpInterests(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemLpInterests",
      "redeemLpInterests(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeMarketLiquidityDual(
    user: Address,
    _inLp: BigInt,
    _minOutXyt: BigInt,
    _minOutToken: BigInt
  ): Array<PendleMarket__removeMarketLiquidityDualResultTransfersStruct> {
    let result = super.call(
      "removeMarketLiquidityDual",
      "removeMarketLiquidityDual(address,uint256,uint256,uint256):((uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_inLp),
        ethereum.Value.fromUnsignedBigInt(_minOutXyt),
        ethereum.Value.fromUnsignedBigInt(_minOutToken)
      ]
    );

    return result[0].toTupleArray<
      PendleMarket__removeMarketLiquidityDualResultTransfersStruct
    >();
  }

  try_removeMarketLiquidityDual(
    user: Address,
    _inLp: BigInt,
    _minOutXyt: BigInt,
    _minOutToken: BigInt
  ): ethereum.CallResult<
    Array<PendleMarket__removeMarketLiquidityDualResultTransfersStruct>
  > {
    let result = super.tryCall(
      "removeMarketLiquidityDual",
      "removeMarketLiquidityDual(address,uint256,uint256,uint256):((uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_inLp),
        ethereum.Value.fromUnsignedBigInt(_minOutXyt),
        ethereum.Value.fromUnsignedBigInt(_minOutToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        PendleMarket__removeMarketLiquidityDualResultTransfersStruct
      >()
    );
  }

  removeMarketLiquiditySingle(
    user: Address,
    _outToken: Address,
    _inLp: BigInt,
    _minOutAmountToken: BigInt
  ): Array<PendleMarket__removeMarketLiquiditySingleResultTransfersStruct> {
    let result = super.call(
      "removeMarketLiquiditySingle",
      "removeMarketLiquiditySingle(address,address,uint256,uint256):((uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(_outToken),
        ethereum.Value.fromUnsignedBigInt(_inLp),
        ethereum.Value.fromUnsignedBigInt(_minOutAmountToken)
      ]
    );

    return result[0].toTupleArray<
      PendleMarket__removeMarketLiquiditySingleResultTransfersStruct
    >();
  }

  try_removeMarketLiquiditySingle(
    user: Address,
    _outToken: Address,
    _inLp: BigInt,
    _minOutAmountToken: BigInt
  ): ethereum.CallResult<
    Array<PendleMarket__removeMarketLiquiditySingleResultTransfersStruct>
  > {
    let result = super.tryCall(
      "removeMarketLiquiditySingle",
      "removeMarketLiquiditySingle(address,address,uint256,uint256):((uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(_outToken),
        ethereum.Value.fromUnsignedBigInt(_inLp),
        ethereum.Value.fromUnsignedBigInt(_minOutAmountToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        PendleMarket__removeMarketLiquiditySingleResultTransfersStruct
      >()
    );
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  start(): BigInt {
    let result = super.call("start", "start():(uint256)", []);

    return result[0].toBigInt();
  }

  try_start(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("start", "start():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapExactIn(
    inToken: Address,
    inAmount: BigInt,
    outToken: Address,
    minOutAmount: BigInt
  ): PendleMarket__swapExactInResult {
    let result = super.call(
      "swapExactIn",
      "swapExactIn(address,uint256,address,uint256):(uint256,(uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromAddress(outToken),
        ethereum.Value.fromUnsignedBigInt(minOutAmount)
      ]
    );

    return new PendleMarket__swapExactInResult(
      result[0].toBigInt(),
      result[1].toTupleArray<PendleMarket__swapExactInResultTransfersStruct>()
    );
  }

  try_swapExactIn(
    inToken: Address,
    inAmount: BigInt,
    outToken: Address,
    minOutAmount: BigInt
  ): ethereum.CallResult<PendleMarket__swapExactInResult> {
    let result = super.tryCall(
      "swapExactIn",
      "swapExactIn(address,uint256,address,uint256):(uint256,(uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromAddress(outToken),
        ethereum.Value.fromUnsignedBigInt(minOutAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleMarket__swapExactInResult(
        value[0].toBigInt(),
        value[1].toTupleArray<PendleMarket__swapExactInResultTransfersStruct>()
      )
    );
  }

  swapExactOut(
    inToken: Address,
    maxInAmount: BigInt,
    outToken: Address,
    outAmount: BigInt
  ): PendleMarket__swapExactOutResult {
    let result = super.call(
      "swapExactOut",
      "swapExactOut(address,uint256,address,uint256):(uint256,(uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromUnsignedBigInt(maxInAmount),
        ethereum.Value.fromAddress(outToken),
        ethereum.Value.fromUnsignedBigInt(outAmount)
      ]
    );

    return new PendleMarket__swapExactOutResult(
      result[0].toBigInt(),
      result[1].toTupleArray<PendleMarket__swapExactOutResultTransfersStruct>()
    );
  }

  try_swapExactOut(
    inToken: Address,
    maxInAmount: BigInt,
    outToken: Address,
    outAmount: BigInt
  ): ethereum.CallResult<PendleMarket__swapExactOutResult> {
    let result = super.tryCall(
      "swapExactOut",
      "swapExactOut(address,uint256,address,uint256):(uint256,(uint256,bool)[2])",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromUnsignedBigInt(maxInAmount),
        ethereum.Value.fromAddress(outToken),
        ethereum.Value.fromUnsignedBigInt(outAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleMarket__swapExactOutResult(
        value[0].toBigInt(),
        value[1].toTupleArray<PendleMarket__swapExactOutResultTransfersStruct>()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  xyt(): Address {
    let result = super.call("xyt", "xyt():(address)", []);

    return result[0].toAddress();
  }

  try_xyt(): ethereum.CallResult<Address> {
    let result = super.tryCall("xyt", "xyt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddMarketLiquidityDualCall extends ethereum.Call {
  get inputs(): AddMarketLiquidityDualCall__Inputs {
    return new AddMarketLiquidityDualCall__Inputs(this);
  }

  get outputs(): AddMarketLiquidityDualCall__Outputs {
    return new AddMarketLiquidityDualCall__Outputs(this);
  }
}

export class AddMarketLiquidityDualCall__Inputs {
  _call: AddMarketLiquidityDualCall;

  constructor(call: AddMarketLiquidityDualCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _desiredXytAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _desiredTokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _xytMinAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _tokenMinAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddMarketLiquidityDualCall__Outputs {
  _call: AddMarketLiquidityDualCall;

  constructor(call: AddMarketLiquidityDualCall) {
    this._call = call;
  }

  get transfers(): Array<AddMarketLiquidityDualCallTransfersStruct> {
    return this._call.outputValues[0].value.toTupleArray<
      AddMarketLiquidityDualCallTransfersStruct
    >();
  }

  get lpOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AddMarketLiquidityDualCallTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class AddMarketLiquiditySingleCall extends ethereum.Call {
  get inputs(): AddMarketLiquiditySingleCall__Inputs {
    return new AddMarketLiquiditySingleCall__Inputs(this);
  }

  get outputs(): AddMarketLiquiditySingleCall__Outputs {
    return new AddMarketLiquiditySingleCall__Outputs(this);
  }
}

export class AddMarketLiquiditySingleCall__Inputs {
  _call: AddMarketLiquiditySingleCall;

  constructor(call: AddMarketLiquiditySingleCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _inToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _exactIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minOutLp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddMarketLiquiditySingleCall__Outputs {
  _call: AddMarketLiquiditySingleCall;

  constructor(call: AddMarketLiquiditySingleCall) {
    this._call = call;
  }

  get transfers(): Array<AddMarketLiquiditySingleCallTransfersStruct> {
    return this._call.outputValues[0].value.toTupleArray<
      AddMarketLiquiditySingleCallTransfersStruct
    >();
  }
}

export class AddMarketLiquiditySingleCallTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BootstrapCall extends ethereum.Call {
  get inputs(): BootstrapCall__Inputs {
    return new BootstrapCall__Inputs(this);
  }

  get outputs(): BootstrapCall__Outputs {
    return new BootstrapCall__Outputs(this);
  }
}

export class BootstrapCall__Inputs {
  _call: BootstrapCall;

  constructor(call: BootstrapCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialXytLiquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get initialTokenLiquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BootstrapCall__Outputs {
  _call: BootstrapCall;

  constructor(call: BootstrapCall) {
    this._call = call;
  }

  get transfers(): Array<BootstrapCallTransfersStruct> {
    return this._call.outputValues[0].value.toTupleArray<
      BootstrapCallTransfersStruct
    >();
  }
}

export class BootstrapCallTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RedeemLpInterestsCall extends ethereum.Call {
  get inputs(): RedeemLpInterestsCall__Inputs {
    return new RedeemLpInterestsCall__Inputs(this);
  }

  get outputs(): RedeemLpInterestsCall__Outputs {
    return new RedeemLpInterestsCall__Outputs(this);
  }
}

export class RedeemLpInterestsCall__Inputs {
  _call: RedeemLpInterestsCall;

  constructor(call: RedeemLpInterestsCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RedeemLpInterestsCall__Outputs {
  _call: RedeemLpInterestsCall;

  constructor(call: RedeemLpInterestsCall) {
    this._call = call;
  }

  get interests(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveMarketLiquidityDualCall extends ethereum.Call {
  get inputs(): RemoveMarketLiquidityDualCall__Inputs {
    return new RemoveMarketLiquidityDualCall__Inputs(this);
  }

  get outputs(): RemoveMarketLiquidityDualCall__Outputs {
    return new RemoveMarketLiquidityDualCall__Outputs(this);
  }
}

export class RemoveMarketLiquidityDualCall__Inputs {
  _call: RemoveMarketLiquidityDualCall;

  constructor(call: RemoveMarketLiquidityDualCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _inLp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minOutXyt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minOutToken(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RemoveMarketLiquidityDualCall__Outputs {
  _call: RemoveMarketLiquidityDualCall;

  constructor(call: RemoveMarketLiquidityDualCall) {
    this._call = call;
  }

  get transfers(): Array<RemoveMarketLiquidityDualCallTransfersStruct> {
    return this._call.outputValues[0].value.toTupleArray<
      RemoveMarketLiquidityDualCallTransfersStruct
    >();
  }
}

export class RemoveMarketLiquidityDualCallTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class RemoveMarketLiquiditySingleCall extends ethereum.Call {
  get inputs(): RemoveMarketLiquiditySingleCall__Inputs {
    return new RemoveMarketLiquiditySingleCall__Inputs(this);
  }

  get outputs(): RemoveMarketLiquiditySingleCall__Outputs {
    return new RemoveMarketLiquiditySingleCall__Outputs(this);
  }
}

export class RemoveMarketLiquiditySingleCall__Inputs {
  _call: RemoveMarketLiquiditySingleCall;

  constructor(call: RemoveMarketLiquiditySingleCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _outToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _inLp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minOutAmountToken(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RemoveMarketLiquiditySingleCall__Outputs {
  _call: RemoveMarketLiquiditySingleCall;

  constructor(call: RemoveMarketLiquiditySingleCall) {
    this._call = call;
  }

  get transfers(): Array<RemoveMarketLiquiditySingleCallTransfersStruct> {
    return this._call.outputValues[0].value.toTupleArray<
      RemoveMarketLiquiditySingleCallTransfersStruct
    >();
  }
}

export class RemoveMarketLiquiditySingleCallTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class SetUpEmergencyModeCall extends ethereum.Call {
  get inputs(): SetUpEmergencyModeCall__Inputs {
    return new SetUpEmergencyModeCall__Inputs(this);
  }

  get outputs(): SetUpEmergencyModeCall__Outputs {
    return new SetUpEmergencyModeCall__Outputs(this);
  }
}

export class SetUpEmergencyModeCall__Inputs {
  _call: SetUpEmergencyModeCall;

  constructor(call: SetUpEmergencyModeCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetUpEmergencyModeCall__Outputs {
  _call: SetUpEmergencyModeCall;

  constructor(call: SetUpEmergencyModeCall) {
    this._call = call;
  }
}

export class SwapExactInCall extends ethereum.Call {
  get inputs(): SwapExactInCall__Inputs {
    return new SwapExactInCall__Inputs(this);
  }

  get outputs(): SwapExactInCall__Outputs {
    return new SwapExactInCall__Outputs(this);
  }
}

export class SwapExactInCall__Inputs {
  _call: SwapExactInCall;

  constructor(call: SwapExactInCall) {
    this._call = call;
  }

  get inToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get outToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minOutAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapExactInCall__Outputs {
  _call: SwapExactInCall;

  constructor(call: SwapExactInCall) {
    this._call = call;
  }

  get outAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get transfers(): Array<SwapExactInCallTransfersStruct> {
    return this._call.outputValues[1].value.toTupleArray<
      SwapExactInCallTransfersStruct
    >();
  }
}

export class SwapExactInCallTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class SwapExactOutCall extends ethereum.Call {
  get inputs(): SwapExactOutCall__Inputs {
    return new SwapExactOutCall__Inputs(this);
  }

  get outputs(): SwapExactOutCall__Outputs {
    return new SwapExactOutCall__Outputs(this);
  }
}

export class SwapExactOutCall__Inputs {
  _call: SwapExactOutCall;

  constructor(call: SwapExactOutCall) {
    this._call = call;
  }

  get inToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxInAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get outToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get outAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapExactOutCall__Outputs {
  _call: SwapExactOutCall;

  constructor(call: SwapExactOutCall) {
    this._call = call;
  }

  get inAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get transfers(): Array<SwapExactOutCallTransfersStruct> {
    return this._call.outputValues[1].value.toTupleArray<
      SwapExactOutCallTransfersStruct
    >();
  }
}

export class SwapExactOutCallTransfersStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isOut(): boolean {
    return this[1].toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawEtherCall extends ethereum.Call {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
