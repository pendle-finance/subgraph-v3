// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CurveShiftBlockDeltaSet extends ethereum.Event {
  get params(): CurveShiftBlockDeltaSet__Params {
    return new CurveShiftBlockDeltaSet__Params(this);
  }
}

export class CurveShiftBlockDeltaSet__Params {
  _event: CurveShiftBlockDeltaSet;

  constructor(event: CurveShiftBlockDeltaSet) {
    this._event = event;
  }

  get _blockDelta(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ExpiryDivisorSet extends ethereum.Event {
  get params(): ExpiryDivisorSet__Params {
    return new ExpiryDivisorSet__Params(this);
  }
}

export class ExpiryDivisorSet__Params {
  _event: ExpiryDivisorSet;

  constructor(event: ExpiryDivisorSet) {
    this._event = event;
  }

  get expiryDivisor(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ForgeAdded extends ethereum.Event {
  get params(): ForgeAdded__Params {
    return new ForgeAdded__Params(this);
  }
}

export class ForgeAdded__Params {
  _event: ForgeAdded;

  constructor(event: ForgeAdded) {
    this._event = event;
  }

  get forgeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get forgeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ForgeFactoryValiditySet extends ethereum.Event {
  get params(): ForgeFactoryValiditySet__Params {
    return new ForgeFactoryValiditySet__Params(this);
  }
}

export class ForgeFactoryValiditySet__Params {
  _event: ForgeFactoryValiditySet;

  constructor(event: ForgeFactoryValiditySet) {
    this._event = event;
  }

  get _forgeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _marketFactoryId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _valid(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ForgeFeeSet extends ethereum.Event {
  get params(): ForgeFeeSet__Params {
    return new ForgeFeeSet__Params(this);
  }
}

export class ForgeFeeSet__Params {
  _event: ForgeFeeSet;

  constructor(event: ForgeFeeSet) {
    this._event = event;
  }

  get forgeFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class InterestUpdateRateDeltaForMarketSet extends ethereum.Event {
  get params(): InterestUpdateRateDeltaForMarketSet__Params {
    return new InterestUpdateRateDeltaForMarketSet__Params(this);
  }
}

export class InterestUpdateRateDeltaForMarketSet__Params {
  _event: InterestUpdateRateDeltaForMarketSet;

  constructor(event: InterestUpdateRateDeltaForMarketSet) {
    this._event = event;
  }

  get interestUpdateRateDeltaForMarket(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LockParamsSet extends ethereum.Event {
  get params(): LockParamsSet__Params {
    return new LockParamsSet__Params(this);
  }
}

export class LockParamsSet__Params {
  _event: LockParamsSet;

  constructor(event: LockParamsSet) {
    this._event = event;
  }

  get lockNumerator(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lockDenominator(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketFeesSet extends ethereum.Event {
  get params(): MarketFeesSet__Params {
    return new MarketFeesSet__Params(this);
  }
}

export class MarketFeesSet__Params {
  _event: MarketFeesSet;

  constructor(event: MarketFeesSet) {
    this._event = event;
  }

  get _swapFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _protocolSwapFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketPairAdded extends ethereum.Event {
  get params(): MarketPairAdded__Params {
    return new MarketPairAdded__Params(this);
  }
}

export class MarketPairAdded__Params {
  _event: MarketPairAdded;

  constructor(event: MarketPairAdded) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get xyt(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NewMarketFactory extends ethereum.Event {
  get params(): NewMarketFactory__Params {
    return new NewMarketFactory__Params(this);
  }
}

export class NewMarketFactory__Params {
  _event: NewMarketFactory;

  constructor(event: NewMarketFactory) {
    this._event = event;
  }

  get marketFactoryId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get marketFactoryAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TreasurySet extends ethereum.Event {
  get params(): TreasurySet__Params {
    return new TreasurySet__Params(this);
  }
}

export class TreasurySet__Params {
  _event: TreasurySet;

  constructor(event: TreasurySet) {
    this._event = event;
  }

  get treasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PendleData__getPendleYieldTokensResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class PendleData extends ethereum.SmartContract {
  static bind(address: Address): PendleData {
    return new PendleData("PendleData", address);
  }

  allMarkets(param0: BigInt): Address {
    let result = super.call("allMarkets", "allMarkets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allMarkets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allMarkets", "allMarkets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allMarketsLength(): BigInt {
    let result = super.call(
      "allMarketsLength",
      "allMarketsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allMarketsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allMarketsLength",
      "allMarketsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  curveShiftBlockDelta(): BigInt {
    let result = super.call(
      "curveShiftBlockDelta",
      "curveShiftBlockDelta():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_curveShiftBlockDelta(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "curveShiftBlockDelta",
      "curveShiftBlockDelta():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expiryDivisor(): BigInt {
    let result = super.call("expiryDivisor", "expiryDivisor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_expiryDivisor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expiryDivisor",
      "expiryDivisor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  forgeFee(): BigInt {
    let result = super.call("forgeFee", "forgeFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_forgeFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("forgeFee", "forgeFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getForgeAddress(param0: Bytes): Address {
    let result = super.call(
      "getForgeAddress",
      "getForgeAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_getForgeAddress(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getForgeAddress",
      "getForgeAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarket(param0: Bytes, param1: Address, param2: Address): Address {
    let result = super.call(
      "getMarket",
      "getMarket(bytes32,address,address):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_getMarket(
    param0: Bytes,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMarket",
      "getMarket(bytes32,address,address):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarketByIndex(index: BigInt): Address {
    let result = super.call(
      "getMarketByIndex",
      "getMarketByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getMarketByIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMarketByIndex",
      "getMarketByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarketFactoryAddress(param0: Bytes): Address {
    let result = super.call(
      "getMarketFactoryAddress",
      "getMarketFactoryAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_getMarketFactoryAddress(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMarketFactoryAddress",
      "getMarketFactoryAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarketFromKey(
    _tokenIn: Address,
    _tokenOut: Address,
    _marketFactoryId: Bytes
  ): Address {
    let result = super.call(
      "getMarketFromKey",
      "getMarketFromKey(address,address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromFixedBytes(_marketFactoryId)
      ]
    );

    return result[0].toAddress();
  }

  try_getMarketFromKey(
    _tokenIn: Address,
    _tokenOut: Address,
    _marketFactoryId: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMarketFromKey",
      "getMarketFromKey(address,address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromFixedBytes(_marketFactoryId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPendleYieldTokens(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): PendleData__getPendleYieldTokensResult {
    let result = super.call(
      "getPendleYieldTokens",
      "getPendleYieldTokens(bytes32,address,uint256):(address,address)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );

    return new PendleData__getPendleYieldTokensResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_getPendleYieldTokens(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): ethereum.CallResult<PendleData__getPendleYieldTokensResult> {
    let result = super.tryCall(
      "getPendleYieldTokens",
      "getPendleYieldTokens(bytes32,address,uint256):(address,address)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleData__getPendleYieldTokensResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  governanceManager(): Address {
    let result = super.call(
      "governanceManager",
      "governanceManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_governanceManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "governanceManager",
      "governanceManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interestUpdateRateDeltaForMarket(): BigInt {
    let result = super.call(
      "interestUpdateRateDeltaForMarket",
      "interestUpdateRateDeltaForMarket():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestUpdateRateDeltaForMarket(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestUpdateRateDeltaForMarket",
      "interestUpdateRateDeltaForMarket():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMarket(param0: Address): boolean {
    let result = super.call("isMarket", "isMarket(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isMarket(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMarket", "isMarket(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidOT(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): boolean {
    let result = super.call(
      "isValidOT",
      "isValidOT(bytes32,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidOT(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidOT",
      "isValidOT(bytes32,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidXYT(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): boolean {
    let result = super.call(
      "isValidXYT",
      "isValidXYT(bytes32,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidXYT(
    _forgeId: Bytes,
    _underlyingAsset: Address,
    _expiry: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidXYT",
      "isValidXYT(bytes32,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_forgeId),
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isXyt(param0: Address): boolean {
    let result = super.call("isXyt", "isXyt(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isXyt(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isXyt", "isXyt(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockDenominator(): BigInt {
    let result = super.call(
      "lockDenominator",
      "lockDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lockDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockDenominator",
      "lockDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockNumerator(): BigInt {
    let result = super.call("lockNumerator", "lockNumerator():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockNumerator",
      "lockNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  otTokens(param0: Bytes, param1: Address, param2: BigInt): Address {
    let result = super.call(
      "otTokens",
      "otTokens(bytes32,address,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_otTokens(
    param0: Bytes,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "otTokens",
      "otTokens(bytes32,address,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pausingManager(): Address {
    let result = super.call("pausingManager", "pausingManager():(address)", []);

    return result[0].toAddress();
  }

  try_pausingManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pausingManager",
      "pausingManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolSwapFee(): BigInt {
    let result = super.call(
      "protocolSwapFee",
      "protocolSwapFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolSwapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolSwapFee",
      "protocolSwapFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapFee(): BigInt {
    let result = super.call("swapFee", "swapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_swapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("swapFee", "swapFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validForgeFactoryPair(param0: Bytes, param1: Bytes): boolean {
    let result = super.call(
      "validForgeFactoryPair",
      "validForgeFactoryPair(bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_validForgeFactoryPair(
    param0: Bytes,
    param1: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validForgeFactoryPair",
      "validForgeFactoryPair(bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  xytTokens(param0: Bytes, param1: Address, param2: BigInt): Address {
    let result = super.call(
      "xytTokens",
      "xytTokens(bytes32,address,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_xytTokens(
    param0: Bytes,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "xytTokens",
      "xytTokens(bytes32,address,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _governanceManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pausingManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddForgeCall extends ethereum.Call {
  get inputs(): AddForgeCall__Inputs {
    return new AddForgeCall__Inputs(this);
  }

  get outputs(): AddForgeCall__Outputs {
    return new AddForgeCall__Outputs(this);
  }
}

export class AddForgeCall__Inputs {
  _call: AddForgeCall;

  constructor(call: AddForgeCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _forgeAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddForgeCall__Outputs {
  _call: AddForgeCall;

  constructor(call: AddForgeCall) {
    this._call = call;
  }
}

export class AddMarketCall extends ethereum.Call {
  get inputs(): AddMarketCall__Inputs {
    return new AddMarketCall__Inputs(this);
  }

  get outputs(): AddMarketCall__Outputs {
    return new AddMarketCall__Outputs(this);
  }
}

export class AddMarketCall__Inputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _xyt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _market(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AddMarketCall__Outputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }
}

export class AddMarketFactoryCall extends ethereum.Call {
  get inputs(): AddMarketFactoryCall__Inputs {
    return new AddMarketFactoryCall__Inputs(this);
  }

  get outputs(): AddMarketFactoryCall__Outputs {
    return new AddMarketFactoryCall__Outputs(this);
  }
}

export class AddMarketFactoryCall__Inputs {
  _call: AddMarketFactoryCall;

  constructor(call: AddMarketFactoryCall) {
    this._call = call;
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _marketFactoryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddMarketFactoryCall__Outputs {
  _call: AddMarketFactoryCall;

  constructor(call: AddMarketFactoryCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetCurveShiftBlockDeltaCall extends ethereum.Call {
  get inputs(): SetCurveShiftBlockDeltaCall__Inputs {
    return new SetCurveShiftBlockDeltaCall__Inputs(this);
  }

  get outputs(): SetCurveShiftBlockDeltaCall__Outputs {
    return new SetCurveShiftBlockDeltaCall__Outputs(this);
  }
}

export class SetCurveShiftBlockDeltaCall__Inputs {
  _call: SetCurveShiftBlockDeltaCall;

  constructor(call: SetCurveShiftBlockDeltaCall) {
    this._call = call;
  }

  get _blockDelta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCurveShiftBlockDeltaCall__Outputs {
  _call: SetCurveShiftBlockDeltaCall;

  constructor(call: SetCurveShiftBlockDeltaCall) {
    this._call = call;
  }
}

export class SetExpiryDivisorCall extends ethereum.Call {
  get inputs(): SetExpiryDivisorCall__Inputs {
    return new SetExpiryDivisorCall__Inputs(this);
  }

  get outputs(): SetExpiryDivisorCall__Outputs {
    return new SetExpiryDivisorCall__Outputs(this);
  }
}

export class SetExpiryDivisorCall__Inputs {
  _call: SetExpiryDivisorCall;

  constructor(call: SetExpiryDivisorCall) {
    this._call = call;
  }

  get _expiryDivisor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetExpiryDivisorCall__Outputs {
  _call: SetExpiryDivisorCall;

  constructor(call: SetExpiryDivisorCall) {
    this._call = call;
  }
}

export class SetForgeFactoryValidityCall extends ethereum.Call {
  get inputs(): SetForgeFactoryValidityCall__Inputs {
    return new SetForgeFactoryValidityCall__Inputs(this);
  }

  get outputs(): SetForgeFactoryValidityCall__Outputs {
    return new SetForgeFactoryValidityCall__Outputs(this);
  }
}

export class SetForgeFactoryValidityCall__Inputs {
  _call: SetForgeFactoryValidityCall;

  constructor(call: SetForgeFactoryValidityCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _marketFactoryId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _valid(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetForgeFactoryValidityCall__Outputs {
  _call: SetForgeFactoryValidityCall;

  constructor(call: SetForgeFactoryValidityCall) {
    this._call = call;
  }
}

export class SetForgeFeeCall extends ethereum.Call {
  get inputs(): SetForgeFeeCall__Inputs {
    return new SetForgeFeeCall__Inputs(this);
  }

  get outputs(): SetForgeFeeCall__Outputs {
    return new SetForgeFeeCall__Outputs(this);
  }
}

export class SetForgeFeeCall__Inputs {
  _call: SetForgeFeeCall;

  constructor(call: SetForgeFeeCall) {
    this._call = call;
  }

  get _forgeFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetForgeFeeCall__Outputs {
  _call: SetForgeFeeCall;

  constructor(call: SetForgeFeeCall) {
    this._call = call;
  }
}

export class SetInterestUpdateRateDeltaForMarketCall extends ethereum.Call {
  get inputs(): SetInterestUpdateRateDeltaForMarketCall__Inputs {
    return new SetInterestUpdateRateDeltaForMarketCall__Inputs(this);
  }

  get outputs(): SetInterestUpdateRateDeltaForMarketCall__Outputs {
    return new SetInterestUpdateRateDeltaForMarketCall__Outputs(this);
  }
}

export class SetInterestUpdateRateDeltaForMarketCall__Inputs {
  _call: SetInterestUpdateRateDeltaForMarketCall;

  constructor(call: SetInterestUpdateRateDeltaForMarketCall) {
    this._call = call;
  }

  get _interestUpdateRateDeltaForMarket(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInterestUpdateRateDeltaForMarketCall__Outputs {
  _call: SetInterestUpdateRateDeltaForMarketCall;

  constructor(call: SetInterestUpdateRateDeltaForMarketCall) {
    this._call = call;
  }
}

export class SetLockParamsCall extends ethereum.Call {
  get inputs(): SetLockParamsCall__Inputs {
    return new SetLockParamsCall__Inputs(this);
  }

  get outputs(): SetLockParamsCall__Outputs {
    return new SetLockParamsCall__Outputs(this);
  }
}

export class SetLockParamsCall__Inputs {
  _call: SetLockParamsCall;

  constructor(call: SetLockParamsCall) {
    this._call = call;
  }

  get _lockNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lockDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLockParamsCall__Outputs {
  _call: SetLockParamsCall;

  constructor(call: SetLockParamsCall) {
    this._call = call;
  }
}

export class SetMarketFeesCall extends ethereum.Call {
  get inputs(): SetMarketFeesCall__Inputs {
    return new SetMarketFeesCall__Inputs(this);
  }

  get outputs(): SetMarketFeesCall__Outputs {
    return new SetMarketFeesCall__Outputs(this);
  }
}

export class SetMarketFeesCall__Inputs {
  _call: SetMarketFeesCall;

  constructor(call: SetMarketFeesCall) {
    this._call = call;
  }

  get _swapFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _protocolSwapFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMarketFeesCall__Outputs {
  _call: SetMarketFeesCall;

  constructor(call: SetMarketFeesCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class StoreTokensCall extends ethereum.Call {
  get inputs(): StoreTokensCall__Inputs {
    return new StoreTokensCall__Inputs(this);
  }

  get outputs(): StoreTokensCall__Outputs {
    return new StoreTokensCall__Outputs(this);
  }
}

export class StoreTokensCall__Inputs {
  _call: StoreTokensCall;

  constructor(call: StoreTokensCall) {
    this._call = call;
  }

  get _forgeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _ot(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _xyt(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class StoreTokensCall__Outputs {
  _call: StoreTokensCall;

  constructor(call: StoreTokensCall) {
    this._call = call;
  }
}
