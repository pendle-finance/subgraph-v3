// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Exit extends ethereum.Event {
  get params(): Exit__Params {
    return new Exit__Params(this);
  }
}

export class Exit__Params {
  _event: Exit;

  constructor(event: Exit) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Shift extends ethereum.Event {
  get params(): Shift__Params {
    return new Shift__Params(this);
  }
}

export class Shift__Params {
  _event: Shift;

  constructor(event: Shift) {
    this._event = event;
  }

  get xytWeightOld(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenWeightOld(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get xytWeightNew(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenWeightNew(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get reserve0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get weight0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reserve1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get weight1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PendleMarket__addMarketLiquidityAllResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PendleMarket__calcExactInInputInTokenReserveStruct extends ethereum.Tuple {
  get weight(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }
}

export class PendleMarket__calcExactInInputOutTokenReserveStruct extends ethereum.Tuple {
  get weight(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }
}

export class PendleMarket__calcExactOutInputInTokenReserveStruct extends ethereum.Tuple {
  get weight(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }
}

export class PendleMarket__calcExactOutInputOutTokenReserveStruct extends ethereum.Tuple {
  get weight(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }
}

export class PendleMarket__getReservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PendleMarket__removeMarketLiquidityAllResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PendleMarket__swapExactInResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PendleMarket__swapExactOutResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PendleMarket extends ethereum.SmartContract {
  static bind(address: Address): PendleMarket {
    return new PendleMarket("PendleMarket", address);
  }

  MIN_LIQUIDITY(): BigInt {
    let result = super.call("MIN_LIQUIDITY", "MIN_LIQUIDITY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_LIQUIDITY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_LIQUIDITY",
      "MIN_LIQUIDITY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addMarketLiquidityAll(
    _exactOutLp: BigInt,
    _maxInXyt: BigInt,
    _maxInToken: BigInt
  ): PendleMarket__addMarketLiquidityAllResult {
    let result = super.call(
      "addMarketLiquidityAll",
      "addMarketLiquidityAll(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_exactOutLp),
        ethereum.Value.fromUnsignedBigInt(_maxInXyt),
        ethereum.Value.fromUnsignedBigInt(_maxInToken)
      ]
    );

    return new PendleMarket__addMarketLiquidityAllResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_addMarketLiquidityAll(
    _exactOutLp: BigInt,
    _maxInXyt: BigInt,
    _maxInToken: BigInt
  ): ethereum.CallResult<PendleMarket__addMarketLiquidityAllResult> {
    let result = super.tryCall(
      "addMarketLiquidityAll",
      "addMarketLiquidityAll(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_exactOutLp),
        ethereum.Value.fromUnsignedBigInt(_maxInXyt),
        ethereum.Value.fromUnsignedBigInt(_maxInToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleMarket__addMarketLiquidityAllResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  addMarketLiquiditySingle(
    _inToken: Address,
    _exactIn: BigInt,
    _minOutLp: BigInt
  ): BigInt {
    let result = super.call(
      "addMarketLiquiditySingle",
      "addMarketLiquiditySingle(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_inToken),
        ethereum.Value.fromUnsignedBigInt(_exactIn),
        ethereum.Value.fromUnsignedBigInt(_minOutLp)
      ]
    );

    return result[0].toBigInt();
  }

  try_addMarketLiquiditySingle(
    _inToken: Address,
    _exactIn: BigInt,
    _minOutLp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addMarketLiquiditySingle",
      "addMarketLiquiditySingle(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_inToken),
        ethereum.Value.fromUnsignedBigInt(_exactIn),
        ethereum.Value.fromUnsignedBigInt(_minOutLp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bootstrap(
    initialXytLiquidity: BigInt,
    initialTokenLiquidity: BigInt
  ): BigInt {
    let result = super.call(
      "bootstrap",
      "bootstrap(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(initialXytLiquidity),
        ethereum.Value.fromUnsignedBigInt(initialTokenLiquidity)
      ]
    );

    return result[0].toBigInt();
  }

  try_bootstrap(
    initialXytLiquidity: BigInt,
    initialTokenLiquidity: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bootstrap",
      "bootstrap(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(initialXytLiquidity),
        ethereum.Value.fromUnsignedBigInt(initialTokenLiquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bootstrapped(): boolean {
    let result = super.call("bootstrapped", "bootstrapped():(bool)", []);

    return result[0].toBoolean();
  }

  try_bootstrapped(): ethereum.CallResult<boolean> {
    let result = super.tryCall("bootstrapped", "bootstrapped():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calcExactIn(
    inTokenReserve: PendleMarket__calcExactInInputInTokenReserveStruct,
    outTokenReserve: PendleMarket__calcExactInInputOutTokenReserveStruct,
    exactOut: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcExactIn",
      "calcExactIn((uint256,uint256),(uint256,uint256),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(inTokenReserve),
        ethereum.Value.fromTuple(outTokenReserve),
        ethereum.Value.fromUnsignedBigInt(exactOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcExactIn(
    inTokenReserve: PendleMarket__calcExactInInputInTokenReserveStruct,
    outTokenReserve: PendleMarket__calcExactInInputOutTokenReserveStruct,
    exactOut: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcExactIn",
      "calcExactIn((uint256,uint256),(uint256,uint256),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(inTokenReserve),
        ethereum.Value.fromTuple(outTokenReserve),
        ethereum.Value.fromUnsignedBigInt(exactOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcExactOut(
    inTokenReserve: PendleMarket__calcExactOutInputInTokenReserveStruct,
    outTokenReserve: PendleMarket__calcExactOutInputOutTokenReserveStruct,
    exactIn: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcExactOut",
      "calcExactOut((uint256,uint256),(uint256,uint256),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(inTokenReserve),
        ethereum.Value.fromTuple(outTokenReserve),
        ethereum.Value.fromUnsignedBigInt(exactIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcExactOut(
    inTokenReserve: PendleMarket__calcExactOutInputInTokenReserveStruct,
    outTokenReserve: PendleMarket__calcExactOutInputOutTokenReserveStruct,
    exactIn: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcExactOut",
      "calcExactOut((uint256,uint256),(uint256,uint256),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(inTokenReserve),
        ethereum.Value.fromTuple(outTokenReserve),
        ethereum.Value.fromUnsignedBigInt(exactIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimLpInterests(account: Address): BigInt {
    let result = super.call(
      "claimLpInterests",
      "claimLpInterests(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_claimLpInterests(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimLpInterests",
      "claimLpInterests(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  expiry(): BigInt {
    let result = super.call("expiry", "expiry():(uint256)", []);

    return result[0].toBigInt();
  }

  try_expiry(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expiry", "expiry():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  forge(): Address {
    let result = super.call("forge", "forge():(address)", []);

    return result[0].toAddress();
  }

  try_forge(): ethereum.CallResult<Address> {
    let result = super.tryCall("forge", "forge():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBalance(asset: Address): BigInt {
    let result = super.call("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(asset)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(asset)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserves(): PendleMarket__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves():(uint256,uint256,uint256)",
      []
    );

    return new PendleMarket__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getReserves(): ethereum.CallResult<PendleMarket__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleMarket__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getWeight(asset: Address): BigInt {
    let result = super.call("getWeight", "getWeight(address):(uint256)", [
      ethereum.Value.fromAddress(asset)
    ]);

    return result[0].toBigInt();
  }

  try_getWeight(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getWeight", "getWeight(address):(uint256)", [
      ethereum.Value.fromAddress(asset)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  globalIncomeIndex(): BigInt {
    let result = super.call(
      "globalIncomeIndex",
      "globalIncomeIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_globalIncomeIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "globalIncomeIndex",
      "globalIncomeIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastGlobalIncomeIndex(param0: Address): BigInt {
    let result = super.call(
      "lastGlobalIncomeIndex",
      "lastGlobalIncomeIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastGlobalIncomeIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastGlobalIncomeIndex",
      "lastGlobalIncomeIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastInterestUpdate(): BigInt {
    let result = super.call(
      "lastInterestUpdate",
      "lastInterestUpdate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastInterestUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastInterestUpdate",
      "lastInterestUpdate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUnderlyingYieldTokenBalance(): BigInt {
    let result = super.call(
      "lastUnderlyingYieldTokenBalance",
      "lastUnderlyingYieldTokenBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastUnderlyingYieldTokenBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUnderlyingYieldTokenBalance",
      "lastUnderlyingYieldTokenBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockStartTime(): BigInt {
    let result = super.call("lockStartTime", "lockStartTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockStartTime",
      "lockStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  removeMarketLiquidityAll(
    _inLp: BigInt,
    _minOutXyt: BigInt,
    _minOutToken: BigInt
  ): PendleMarket__removeMarketLiquidityAllResult {
    let result = super.call(
      "removeMarketLiquidityAll",
      "removeMarketLiquidityAll(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_inLp),
        ethereum.Value.fromUnsignedBigInt(_minOutXyt),
        ethereum.Value.fromUnsignedBigInt(_minOutToken)
      ]
    );

    return new PendleMarket__removeMarketLiquidityAllResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeMarketLiquidityAll(
    _inLp: BigInt,
    _minOutXyt: BigInt,
    _minOutToken: BigInt
  ): ethereum.CallResult<PendleMarket__removeMarketLiquidityAllResult> {
    let result = super.tryCall(
      "removeMarketLiquidityAll",
      "removeMarketLiquidityAll(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_inLp),
        ethereum.Value.fromUnsignedBigInt(_minOutXyt),
        ethereum.Value.fromUnsignedBigInt(_minOutToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleMarket__removeMarketLiquidityAllResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeMarketLiquiditySingle(
    _outToken: Address,
    _inLp: BigInt,
    _minOutAmountToken: BigInt
  ): BigInt {
    let result = super.call(
      "removeMarketLiquiditySingle",
      "removeMarketLiquiditySingle(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_outToken),
        ethereum.Value.fromUnsignedBigInt(_inLp),
        ethereum.Value.fromUnsignedBigInt(_minOutAmountToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeMarketLiquiditySingle(
    _outToken: Address,
    _inLp: BigInt,
    _minOutAmountToken: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeMarketLiquiditySingle",
      "removeMarketLiquiditySingle(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_outToken),
        ethereum.Value.fromUnsignedBigInt(_inLp),
        ethereum.Value.fromUnsignedBigInt(_minOutAmountToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  spotPrice(inToken: Address, outToken: Address): BigInt {
    let result = super.call(
      "spotPrice",
      "spotPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromAddress(outToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_spotPrice(
    inToken: Address,
    outToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "spotPrice",
      "spotPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromAddress(outToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  start(): BigInt {
    let result = super.call("start", "start():(uint256)", []);

    return result[0].toBigInt();
  }

  try_start(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("start", "start():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapExactIn(
    inToken: Address,
    inAmount: BigInt,
    outToken: Address,
    minOutAmount: BigInt,
    maxPrice: BigInt
  ): PendleMarket__swapExactInResult {
    let result = super.call(
      "swapExactIn",
      "swapExactIn(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromAddress(outToken),
        ethereum.Value.fromUnsignedBigInt(minOutAmount),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );

    return new PendleMarket__swapExactInResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapExactIn(
    inToken: Address,
    inAmount: BigInt,
    outToken: Address,
    minOutAmount: BigInt,
    maxPrice: BigInt
  ): ethereum.CallResult<PendleMarket__swapExactInResult> {
    let result = super.tryCall(
      "swapExactIn",
      "swapExactIn(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromAddress(outToken),
        ethereum.Value.fromUnsignedBigInt(minOutAmount),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleMarket__swapExactInResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swapExactOut(
    inToken: Address,
    maxInAmount: BigInt,
    outToken: Address,
    outAmount: BigInt,
    maxPrice: BigInt
  ): PendleMarket__swapExactOutResult {
    let result = super.call(
      "swapExactOut",
      "swapExactOut(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromUnsignedBigInt(maxInAmount),
        ethereum.Value.fromAddress(outToken),
        ethereum.Value.fromUnsignedBigInt(outAmount),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );

    return new PendleMarket__swapExactOutResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapExactOut(
    inToken: Address,
    maxInAmount: BigInt,
    outToken: Address,
    outAmount: BigInt,
    maxPrice: BigInt
  ): ethereum.CallResult<PendleMarket__swapExactOutResult> {
    let result = super.tryCall(
      "swapExactOut",
      "swapExactOut(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(inToken),
        ethereum.Value.fromUnsignedBigInt(maxInAmount),
        ethereum.Value.fromAddress(outToken),
        ethereum.Value.fromUnsignedBigInt(outAmount),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PendleMarket__swapExactOutResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  xyt(): Address {
    let result = super.call("xyt", "xyt():(address)", []);

    return result[0].toAddress();
  }

  try_xyt(): ethereum.CallResult<Address> {
    let result = super.tryCall("xyt", "xyt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _forge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _xyt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMarketLiquidityAllCall extends ethereum.Call {
  get inputs(): AddMarketLiquidityAllCall__Inputs {
    return new AddMarketLiquidityAllCall__Inputs(this);
  }

  get outputs(): AddMarketLiquidityAllCall__Outputs {
    return new AddMarketLiquidityAllCall__Outputs(this);
  }
}

export class AddMarketLiquidityAllCall__Inputs {
  _call: AddMarketLiquidityAllCall;

  constructor(call: AddMarketLiquidityAllCall) {
    this._call = call;
  }

  get _exactOutLp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxInXyt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxInToken(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddMarketLiquidityAllCall__Outputs {
  _call: AddMarketLiquidityAllCall;

  constructor(call: AddMarketLiquidityAllCall) {
    this._call = call;
  }

  get amountXytUsed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountTokenUsed(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AddMarketLiquiditySingleCall extends ethereum.Call {
  get inputs(): AddMarketLiquiditySingleCall__Inputs {
    return new AddMarketLiquiditySingleCall__Inputs(this);
  }

  get outputs(): AddMarketLiquiditySingleCall__Outputs {
    return new AddMarketLiquiditySingleCall__Outputs(this);
  }
}

export class AddMarketLiquiditySingleCall__Inputs {
  _call: AddMarketLiquiditySingleCall;

  constructor(call: AddMarketLiquiditySingleCall) {
    this._call = call;
  }

  get _inToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _exactIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minOutLp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddMarketLiquiditySingleCall__Outputs {
  _call: AddMarketLiquiditySingleCall;

  constructor(call: AddMarketLiquiditySingleCall) {
    this._call = call;
  }

  get exactOutLp(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BootstrapCall extends ethereum.Call {
  get inputs(): BootstrapCall__Inputs {
    return new BootstrapCall__Inputs(this);
  }

  get outputs(): BootstrapCall__Outputs {
    return new BootstrapCall__Outputs(this);
  }
}

export class BootstrapCall__Inputs {
  _call: BootstrapCall;

  constructor(call: BootstrapCall) {
    this._call = call;
  }

  get initialXytLiquidity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get initialTokenLiquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BootstrapCall__Outputs {
  _call: BootstrapCall;

  constructor(call: BootstrapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimLpInterestsCall extends ethereum.Call {
  get inputs(): ClaimLpInterestsCall__Inputs {
    return new ClaimLpInterestsCall__Inputs(this);
  }

  get outputs(): ClaimLpInterestsCall__Outputs {
    return new ClaimLpInterestsCall__Outputs(this);
  }
}

export class ClaimLpInterestsCall__Inputs {
  _call: ClaimLpInterestsCall;

  constructor(call: ClaimLpInterestsCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimLpInterestsCall__Outputs {
  _call: ClaimLpInterestsCall;

  constructor(call: ClaimLpInterestsCall) {
    this._call = call;
  }

  get interests(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveMarketLiquidityAllCall extends ethereum.Call {
  get inputs(): RemoveMarketLiquidityAllCall__Inputs {
    return new RemoveMarketLiquidityAllCall__Inputs(this);
  }

  get outputs(): RemoveMarketLiquidityAllCall__Outputs {
    return new RemoveMarketLiquidityAllCall__Outputs(this);
  }
}

export class RemoveMarketLiquidityAllCall__Inputs {
  _call: RemoveMarketLiquidityAllCall;

  constructor(call: RemoveMarketLiquidityAllCall) {
    this._call = call;
  }

  get _inLp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minOutXyt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minOutToken(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveMarketLiquidityAllCall__Outputs {
  _call: RemoveMarketLiquidityAllCall;

  constructor(call: RemoveMarketLiquidityAllCall) {
    this._call = call;
  }

  get xytOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get tokenOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveMarketLiquiditySingleCall extends ethereum.Call {
  get inputs(): RemoveMarketLiquiditySingleCall__Inputs {
    return new RemoveMarketLiquiditySingleCall__Inputs(this);
  }

  get outputs(): RemoveMarketLiquiditySingleCall__Outputs {
    return new RemoveMarketLiquiditySingleCall__Outputs(this);
  }
}

export class RemoveMarketLiquiditySingleCall__Inputs {
  _call: RemoveMarketLiquiditySingleCall;

  constructor(call: RemoveMarketLiquiditySingleCall) {
    this._call = call;
  }

  get _outToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _inLp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minOutAmountToken(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveMarketLiquiditySingleCall__Outputs {
  _call: RemoveMarketLiquiditySingleCall;

  constructor(call: RemoveMarketLiquiditySingleCall) {
    this._call = call;
  }

  get outAmountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapExactInCall extends ethereum.Call {
  get inputs(): SwapExactInCall__Inputs {
    return new SwapExactInCall__Inputs(this);
  }

  get outputs(): SwapExactInCall__Outputs {
    return new SwapExactInCall__Outputs(this);
  }
}

export class SwapExactInCall__Inputs {
  _call: SwapExactInCall;

  constructor(call: SwapExactInCall) {
    this._call = call;
  }

  get inToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get outToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minOutAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactInCall__Outputs {
  _call: SwapExactInCall;

  constructor(call: SwapExactInCall) {
    this._call = call;
  }

  get outAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get spotPriceAfter(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapExactOutCall extends ethereum.Call {
  get inputs(): SwapExactOutCall__Inputs {
    return new SwapExactOutCall__Inputs(this);
  }

  get outputs(): SwapExactOutCall__Outputs {
    return new SwapExactOutCall__Outputs(this);
  }
}

export class SwapExactOutCall__Inputs {
  _call: SwapExactOutCall;

  constructor(call: SwapExactOutCall) {
    this._call = call;
  }

  get inToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxInAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get outToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get outAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactOutCall__Outputs {
  _call: SwapExactOutCall;

  constructor(call: SwapExactOutCall) {
    this._call = call;
  }

  get inAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get spotPriceAfter(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
