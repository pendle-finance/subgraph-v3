// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DueInterestSettled extends ethereum.Event {
  get params(): DueInterestSettled__Params {
    return new DueInterestSettled__Params(this);
  }
}

export class DueInterestSettled__Params {
  _event: DueInterestSettled;

  constructor(event: DueInterestSettled) {
    this._event = event;
  }

  get forgeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get underlyingAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get expiry(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class MintYieldToken extends ethereum.Event {
  get params(): MintYieldToken__Params {
    return new MintYieldToken__Params(this);
  }
}

export class MintYieldToken__Params {
  _event: MintYieldToken;

  constructor(event: MintYieldToken) {
    this._event = event;
  }

  get forgeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get underlyingAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get expiry(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewYieldContracts extends ethereum.Event {
  get params(): NewYieldContracts__Params {
    return new NewYieldContracts__Params(this);
  }
}

export class NewYieldContracts__Params {
  _event: NewYieldContracts;

  constructor(event: NewYieldContracts) {
    this._event = event;
  }

  get forgeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get underlyingAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get expiry(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ot(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get xyt(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class RedeemYieldToken extends ethereum.Event {
  get params(): RedeemYieldToken__Params {
    return new RedeemYieldToken__Params(this);
  }
}

export class RedeemYieldToken__Params {
  _event: RedeemYieldToken;

  constructor(event: RedeemYieldToken) {
    this._event = event;
  }

  get forgeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get underlyingAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get expiry(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountToRedeem(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get redeemedAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class IPendleForge__mintOtAndXytResult {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class IPendleForge__newYieldContractsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class IPendleForge extends ethereum.SmartContract {
  static bind(address: Address): IPendleForge {
    return new IPendleForge("IPendleForge", address);
  }

  data(): Address {
    let result = super.call("data", "data():(address)", []);

    return result[0].toAddress();
  }

  try_data(): ethereum.CallResult<Address> {
    let result = super.tryCall("data", "data():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dueInterests(
    _underlyingAsset: Address,
    expiry: BigInt,
    _user: Address
  ): BigInt {
    let result = super.call(
      "dueInterests",
      "dueInterests(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_dueInterests(
    _underlyingAsset: Address,
    expiry: BigInt,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dueInterests",
      "dueInterests(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  forgeId(): Bytes {
    let result = super.call("forgeId", "forgeId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_forgeId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("forgeId", "forgeId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getYieldBearingToken(underlyingAsset: Address): Address {
    let result = super.call(
      "getYieldBearingToken",
      "getYieldBearingToken(address):(address)",
      [ethereum.Value.fromAddress(underlyingAsset)]
    );

    return result[0].toAddress();
  }

  try_getYieldBearingToken(
    underlyingAsset: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getYieldBearingToken",
      "getYieldBearingToken(address):(address)",
      [ethereum.Value.fromAddress(underlyingAsset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mintOtAndXyt(
    underlyingAsset: Address,
    expiry: BigInt,
    amountToTokenize: BigInt,
    to: Address
  ): IPendleForge__mintOtAndXytResult {
    let result = super.call(
      "mintOtAndXyt",
      "mintOtAndXyt(address,uint256,uint256,address):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amountToTokenize),
        ethereum.Value.fromAddress(to)
      ]
    );

    return new IPendleForge__mintOtAndXytResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_mintOtAndXyt(
    underlyingAsset: Address,
    expiry: BigInt,
    amountToTokenize: BigInt,
    to: Address
  ): ethereum.CallResult<IPendleForge__mintOtAndXytResult> {
    let result = super.tryCall(
      "mintOtAndXyt",
      "mintOtAndXyt(address,uint256,uint256,address):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amountToTokenize),
        ethereum.Value.fromAddress(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IPendleForge__mintOtAndXytResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  newYieldContracts(
    underlyingAsset: Address,
    expiry: BigInt
  ): IPendleForge__newYieldContractsResult {
    let result = super.call(
      "newYieldContracts",
      "newYieldContracts(address,uint256):(address,address)",
      [
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry)
      ]
    );

    return new IPendleForge__newYieldContractsResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_newYieldContracts(
    underlyingAsset: Address,
    expiry: BigInt
  ): ethereum.CallResult<IPendleForge__newYieldContractsResult> {
    let result = super.tryCall(
      "newYieldContracts",
      "newYieldContracts(address,uint256):(address,address)",
      [
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IPendleForge__newYieldContractsResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  redeemAfterExpiry(
    user: Address,
    underlyingAsset: Address,
    expiry: BigInt
  ): BigInt {
    let result = super.call(
      "redeemAfterExpiry",
      "redeemAfterExpiry(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemAfterExpiry(
    user: Address,
    underlyingAsset: Address,
    expiry: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemAfterExpiry",
      "redeemAfterExpiry(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemDueInterests(
    user: Address,
    underlyingAsset: Address,
    expiry: BigInt
  ): BigInt {
    let result = super.call(
      "redeemDueInterests",
      "redeemDueInterests(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemDueInterests(
    user: Address,
    underlyingAsset: Address,
    expiry: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemDueInterests",
      "redeemDueInterests(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlying(
    user: Address,
    underlyingAsset: Address,
    expiry: BigInt,
    amountToRedeem: BigInt
  ): BigInt {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amountToRedeem)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemUnderlying(
    user: Address,
    underlyingAsset: Address,
    expiry: BigInt,
    amountToRedeem: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amountToRedeem)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardManager(): Address {
    let result = super.call("rewardManager", "rewardManager():(address)", []);

    return result[0].toAddress();
  }

  try_rewardManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardManager",
      "rewardManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yieldContractDeployer(): Address {
    let result = super.call(
      "yieldContractDeployer",
      "yieldContractDeployer():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_yieldContractDeployer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "yieldContractDeployer",
      "yieldContractDeployer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yieldTokenHolders(_underlyingAsset: Address, _expiry: BigInt): Address {
    let result = super.call(
      "yieldTokenHolders",
      "yieldTokenHolders(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );

    return result[0].toAddress();
  }

  try_yieldTokenHolders(
    _underlyingAsset: Address,
    _expiry: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "yieldTokenHolders",
      "yieldTokenHolders(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class GetYieldBearingTokenCall extends ethereum.Call {
  get inputs(): GetYieldBearingTokenCall__Inputs {
    return new GetYieldBearingTokenCall__Inputs(this);
  }

  get outputs(): GetYieldBearingTokenCall__Outputs {
    return new GetYieldBearingTokenCall__Outputs(this);
  }
}

export class GetYieldBearingTokenCall__Inputs {
  _call: GetYieldBearingTokenCall;

  constructor(call: GetYieldBearingTokenCall) {
    this._call = call;
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetYieldBearingTokenCall__Outputs {
  _call: GetYieldBearingTokenCall;

  constructor(call: GetYieldBearingTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MintOtAndXytCall extends ethereum.Call {
  get inputs(): MintOtAndXytCall__Inputs {
    return new MintOtAndXytCall__Inputs(this);
  }

  get outputs(): MintOtAndXytCall__Outputs {
    return new MintOtAndXytCall__Outputs(this);
  }
}

export class MintOtAndXytCall__Inputs {
  _call: MintOtAndXytCall;

  constructor(call: MintOtAndXytCall) {
    this._call = call;
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountToTokenize(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class MintOtAndXytCall__Outputs {
  _call: MintOtAndXytCall;

  constructor(call: MintOtAndXytCall) {
    this._call = call;
  }

  get ot(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get xyt(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get amountTokenMinted(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class NewYieldContractsCall extends ethereum.Call {
  get inputs(): NewYieldContractsCall__Inputs {
    return new NewYieldContractsCall__Inputs(this);
  }

  get outputs(): NewYieldContractsCall__Outputs {
    return new NewYieldContractsCall__Outputs(this);
  }
}

export class NewYieldContractsCall__Inputs {
  _call: NewYieldContractsCall;

  constructor(call: NewYieldContractsCall) {
    this._call = call;
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NewYieldContractsCall__Outputs {
  _call: NewYieldContractsCall;

  constructor(call: NewYieldContractsCall) {
    this._call = call;
  }

  get ot(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get xyt(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class RedeemAfterExpiryCall extends ethereum.Call {
  get inputs(): RedeemAfterExpiryCall__Inputs {
    return new RedeemAfterExpiryCall__Inputs(this);
  }

  get outputs(): RedeemAfterExpiryCall__Outputs {
    return new RedeemAfterExpiryCall__Outputs(this);
  }
}

export class RedeemAfterExpiryCall__Inputs {
  _call: RedeemAfterExpiryCall;

  constructor(call: RedeemAfterExpiryCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemAfterExpiryCall__Outputs {
  _call: RedeemAfterExpiryCall;

  constructor(call: RedeemAfterExpiryCall) {
    this._call = call;
  }

  get redeemedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemDueInterestsCall extends ethereum.Call {
  get inputs(): RedeemDueInterestsCall__Inputs {
    return new RedeemDueInterestsCall__Inputs(this);
  }

  get outputs(): RedeemDueInterestsCall__Outputs {
    return new RedeemDueInterestsCall__Outputs(this);
  }
}

export class RedeemDueInterestsCall__Inputs {
  _call: RedeemDueInterestsCall;

  constructor(call: RedeemDueInterestsCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemDueInterestsCall__Outputs {
  _call: RedeemDueInterestsCall;

  constructor(call: RedeemDueInterestsCall) {
    this._call = call;
  }

  get interests(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountToRedeem(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get redeemedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetUpEmergencyModeCall extends ethereum.Call {
  get inputs(): SetUpEmergencyModeCall__Inputs {
    return new SetUpEmergencyModeCall__Inputs(this);
  }

  get outputs(): SetUpEmergencyModeCall__Outputs {
    return new SetUpEmergencyModeCall__Outputs(this);
  }
}

export class SetUpEmergencyModeCall__Inputs {
  _call: SetUpEmergencyModeCall;

  constructor(call: SetUpEmergencyModeCall) {
    this._call = call;
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get spender(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetUpEmergencyModeCall__Outputs {
  _call: SetUpEmergencyModeCall;

  constructor(call: SetUpEmergencyModeCall) {
    this._call = call;
  }
}

export class UpdateDueInterestsCall extends ethereum.Call {
  get inputs(): UpdateDueInterestsCall__Inputs {
    return new UpdateDueInterestsCall__Inputs(this);
  }

  get outputs(): UpdateDueInterestsCall__Outputs {
    return new UpdateDueInterestsCall__Outputs(this);
  }
}

export class UpdateDueInterestsCall__Inputs {
  _call: UpdateDueInterestsCall;

  constructor(call: UpdateDueInterestsCall) {
    this._call = call;
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UpdateDueInterestsCall__Outputs {
  _call: UpdateDueInterestsCall;

  constructor(call: UpdateDueInterestsCall) {
    this._call = call;
  }
}

export class UpdatePendingRewardsCall extends ethereum.Call {
  get inputs(): UpdatePendingRewardsCall__Inputs {
    return new UpdatePendingRewardsCall__Inputs(this);
  }

  get outputs(): UpdatePendingRewardsCall__Outputs {
    return new UpdatePendingRewardsCall__Outputs(this);
  }
}

export class UpdatePendingRewardsCall__Inputs {
  _call: UpdatePendingRewardsCall;

  constructor(call: UpdatePendingRewardsCall) {
    this._call = call;
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UpdatePendingRewardsCall__Outputs {
  _call: UpdatePendingRewardsCall;

  constructor(call: UpdatePendingRewardsCall) {
    this._call = call;
  }
}

export class WithdrawForgeFeeCall extends ethereum.Call {
  get inputs(): WithdrawForgeFeeCall__Inputs {
    return new WithdrawForgeFeeCall__Inputs(this);
  }

  get outputs(): WithdrawForgeFeeCall__Outputs {
    return new WithdrawForgeFeeCall__Outputs(this);
  }
}

export class WithdrawForgeFeeCall__Inputs {
  _call: WithdrawForgeFeeCall;

  constructor(call: WithdrawForgeFeeCall) {
    this._call = call;
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawForgeFeeCall__Outputs {
  _call: WithdrawForgeFeeCall;

  constructor(call: WithdrawForgeFeeCall) {
    this._call = call;
  }
}
