type Forge @entity {
  id: ID! #address
  forgeId: String! #Human Readable ID
}

type YieldContract @entity {
  #Forge ID + underlying asset + expiry
  id: ID!
  forgeId: String!

  # Underlying Asset Token
  underlyingAsset: Token!
  # XYT - Future Yield Token
  xyt: Token!
  # OT - Ownership Token
  ot: Token!
  #Expiry of Yield Tokens
  expiry: BigInt!

  # Total mint transactions
  mintTxCount: BigInt!
  # Total redeem transactions
  redeemTxCount: BigInt!
  # Total interest settled transactions
  interestSettledTxCount: BigInt!

  #Volume
  mintVolume: BigDecimal!
  redeemVolume: BigDecimal!
  interestSettledVolume: BigDecimal!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!

  mintVolume: BigDecimal!
  mintVolumeUSD: BigDecimal!

  redeemVolume: BigDecimal!
  redeemVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!
}

type MintYieldToken @entity {
  # transaction hash
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!

  forgeId: String!
  amountMinted: BigDecimal!
  expiry: BigInt!
  from: Bytes! # the EOA that initiated the txn
  # Underlying Asset Token
  underlyingAsset: Token!
  yieldContract: YieldContract!
}

type RedeemYieldToken @entity {
  # transaction hash
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!

  forgeId: Bytes!
  amountRedeemed: BigDecimal!
  expiry: BigInt!
  from: Bytes! # the EOA that initiated the txn
  # Underlying Asset Token
  underlyingAsset: Token!
  yieldContract: YieldContract!
}

type Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token! #xyt Token
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!
  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
  feesToken0: BigDecimal!
  feesToken1: BigDecimal!
  feesUSD: BigDecimal

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  # pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
  # liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
  # liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
  # mints: [Mint!]! @derivedFrom(field: "pair")
  # burns: [Burn!]! @derivedFrom(field: "pair")
  # swaps: [Swap!]! @derivedFrom(field: "pair")
}
